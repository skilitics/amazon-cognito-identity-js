{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///amazon-cognito-identity.min.js","webpack:///webpack/bootstrap d48c38d0d09e9a7e3ed5","webpack:///./enhance.js","webpack:///external \"sjcl\"","webpack:///./src/AuthenticationHelper.js","webpack:///./src/CognitoAccessToken.js","webpack:///./src/CognitoIdToken.js","webpack:///./src/CognitoRefreshToken.js","webpack:///./src/CognitoUser.js","webpack:///./src/CognitoUserAttribute.js","webpack:///./src/CognitoUserSession.js","webpack:///./src/DateHelper.js","webpack:///external {\"root\":[\"AWSCognito\",\"CognitoIdentityServiceProvider\"],\"commonjs2\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"commonjs\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"amd\":\"aws-sdk/clients/cognitoidentityserviceprovider\"}","webpack:///external {\"root\":[],\"commonjs2\":\"jsbn\",\"commonjs\":\"jsbn\",\"amd\":\"jsbn\"}","webpack:///./src/AuthenticationDetails.js","webpack:///./src/CognitoUserPool.js"],"names":["root","factory","exports","module","require","define","amd","AmazonCognitoIdentity","sjcl","AWSCognito","CognitoIdentityServiceProvider","this","__WEBPACK_EXTERNAL_MODULE_1__","__WEBPACK_EXTERNAL_MODULE_10__","__WEBPACK_EXTERNAL_MODULE_11__","modules","__webpack_require__","moduleId","installedModules","id","loaded","call","m","c","p","_interopRequireWildcard","obj","__esModule","newObj","key","Object","prototype","hasOwnProperty","_interopRequireDefault","default","defineProperty","value","_src","keys","forEach","enumerable","get","_cognitoidentityserviceprovider","_cognitoidentityserviceprovider2","enhancements","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","i","length","descriptor","configurable","writable","protoProps","staticProps","_sjcl","_jsbn","initN","AuthenticationHelper","PoolName","paranoia","N","BigInteger","g","k","hexHash","toString","smallAValue","generateRandomSmallA","largeAValue","calculateA","infoBits","codec","utf8String","toBits","poolName","words","random","randomWords","hexRandom","hex","fromBits","randomBigInt","smallABigInt","mod","stringRandom","base64","randomPassword","SaltToHashDevices","verifierDevices","deviceGroupKey","username","generateRandomString","combinedString","hashedString","hash","saltDevices","firstCharSalt","indexOf","verifierDevicesNotPadded","modPow","firstCharVerifierDevices","a","A","Error","B","firstCharA","firstCharB","AToHash","BToHash","UHexHash","finalU","bitArray","hashHex","sha256","Array","join","hexStr","ikm","salt","mac","misc","hmac","update","prk","digest","infoBitsUpdate","concat","String","fromCharCode","clamp","password","serverBValue","equals","UValue","calculateU","usernamePassword","usernamePasswordHash","SaltToHash","xValue","gModPowXN","intValue2","subtract","multiply","sValue","add","SToHash","firstCharS","UValueToHash","firstCharU","hkdf","computehkdf","CognitoAccessToken","_ref","arguments","undefined","AccessToken","jwtToken","payload","split","expiration","JSON","parse","base64url","exp","CognitoIdToken","IdToken","CognitoRefreshToken","RefreshToken","token","_AuthenticationHelper","_AuthenticationHelper2","_CognitoAccessToken","_CognitoAccessToken2","_CognitoIdToken","_CognitoIdToken2","_CognitoRefreshToken","_CognitoRefreshToken2","_CognitoUserSession","_CognitoUserSession2","_DateHelper","_DateHelper2","_CognitoUserAttribute","_CognitoUserAttribute2","CognitoUser","data","Username","Pool","pool","Session","client","signInUserSession","authenticationFlowType","authDetails","callback","_this","authenticationHelper","getUserPoolId","getParanoia","dateHelper","authParameters","deviceKey","DEVICE_KEY","USERNAME","SRP_A","getLargeAValue","CHALLENGE_NAME","makeUnauthenticatedRequest","AuthFlow","ClientId","getClientId","AuthParameters","ClientMetadata","getValidationData","err","onFailure","challengeParameters","ChallengeParameters","USER_ID_FOR_SRP","SRP_B","SALT","getCachedDeviceKeyAndPassword","getPasswordAuthenticationKey","getPassword","secretBlockBits","SECRET_BLOCK","dateNow","getNowString","signature","signatureString","challengeResponses","PASSWORD_CLAIM_SECRET_BLOCK","TIMESTAMP","PASSWORD_CLAIM_SIGNATURE","ChallengeName","ChallengeResponses","errAuthenticate","dataAuthenticate","challengeName","mfaRequired","customChallenge","getDeviceResponse","getCognitoUserSession","AuthenticationResult","cacheTokens","newDeviceMetadata","NewDeviceMetadata","onSuccess","generateHashDevice","DeviceGroupKey","DeviceKey","deviceSecretVerifierConfig","Salt","getSaltDevices","PasswordVerifier","getVerifierDevices","getRandomPassword","getAccessToken","getJwtToken","DeviceSecretVerifierConfig","DeviceName","navigator","userAgent","errConfirm","dataConfirm","cacheDeviceKeyAndPassword","UserConfirmationNecessary","_this2","confirmationCode","forceAliasCreation","ConfirmationCode","ForceAliasCreation","answerChallenge","_this3","ANSWER","_this4","SMS_MFA_CODE","oldUserPassword","newUserPassword","isValid","PreviousPassword","ProposedPassword","mfaOptions","mfaEnabled","DeliveryMedium","AttributeName","push","MFAOptions","attributes","UserAttributes","userData","attributeList","attribute","Name","Value","userAttribute","UserAttributeNames","keyPrefix","idTokenKey","accessTokenKey","refreshTokenKey","storage","window","localStorage","getItem","idToken","accessToken","refreshToken","sessionData","cachedSession","getToken","refreshSession","_this5","REFRESH_TOKEN","lastUserKey","deviceKeyKey","authResult","authenticationResult","setItem","getIdToken","getRefreshToken","randomPasswordKey","deviceGroupKeyKey","removeItem","inputVerificationCode","newPassword","Password","attributeName","Code","_this6","deviceGroupkey","clearCachedDeviceKeyAndPassword","DeviceRememberedStatus","limit","paginationToken","Limit","PaginationToken","_this7","clearCachedTokens","CognitoUserAttribute","name","stringify","CognitoUserSession","now","Math","floor","Date","getExpiration","monthNames","weekNames","DateHelper","weekDay","getUTCDay","month","getUTCMonth","day","getUTCDate","hours","getUTCHours","minutes","getUTCMinutes","seconds","getUTCSeconds","year","getUTCFullYear","AuthenticationDetails","ValidationData","validationData","_CognitoUser","_CognitoUser2","CognitoUserPool","UserPoolId","Paranoia","test","region","userPoolId","clientId","apiVersion","userAttributes","cognitoUser","returnData","user","userConfirmed","UserConfirmed","lastAuthUser","_AuthenticationDetails","_CognitoUserPool"],"mappings":"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","file":"amazon-cognito-identity.min.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"sjcl\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"), require(\"jsbn\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"sjcl\", \"aws-sdk/clients/cognitoidentityserviceprovider\", \"jsbn\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AmazonCognitoIdentity\"] = factory(require(\"sjcl\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"), require(\"jsbn\"));\n\telse\n\t\troot[\"AmazonCognitoIdentity\"] = factory(root[\"sjcl\"], root[\"AWSCognito\"][\"CognitoIdentityServiceProvider\"], root);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__) {\nreturn \n\n\n/** WEBPACK FOOTER **\n ** webpack/universalModuleDefinition\n **/","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"sjcl\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"), require(\"jsbn\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([\"sjcl\", \"aws-sdk/clients/cognitoidentityserviceprovider\", \"jsbn\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AmazonCognitoIdentity\"] = factory(require(\"sjcl\"), require(\"aws-sdk/clients/cognitoidentityserviceprovider\"), require(\"jsbn\"));\n\telse\n\t\troot[\"AmazonCognitoIdentity\"] = factory(root[\"sjcl\"], root[\"AWSCognito\"][\"CognitoIdentityServiceProvider\"], root);\n})(this, function(__WEBPACK_EXTERNAL_MODULE_1__, __WEBPACK_EXTERNAL_MODULE_10__, __WEBPACK_EXTERNAL_MODULE_11__) {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _src = __webpack_require__(14);\n\t\n\tObject.keys(_src).forEach(function (key) {\n\t  if (key === \"default\" || key === \"__esModule\") return;\n\t  Object.defineProperty(exports, key, {\n\t    enumerable: true,\n\t    get: function get() {\n\t      return _src[key];\n\t    }\n\t  });\n\t});\n\t\n\tvar _cognitoidentityserviceprovider = __webpack_require__(10);\n\t\n\tvar _cognitoidentityserviceprovider2 = _interopRequireDefault(_cognitoidentityserviceprovider);\n\t\n\tvar enhancements = _interopRequireWildcard(_src);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tObject.keys(enhancements).forEach(function (key) {\n\t  _cognitoidentityserviceprovider2.default[key] = enhancements[key];\n\t});\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\r\n\topyright 2016 Amazon.com,\r\n\tnc. or its affiliates. All Rights Reserved.\r\n\tr\n\ticensed under the Amazon Software License (the \"License\").\r\n\tou may not use this file except in compliance with the\r\n\ticense. A copy of the License is located at\r\n\tr\n\thttp://aws.amazon.com/asl/\r\n\tr\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * or in the \"license\" file accompanying this file. This file is\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\texpress or implied. See the License\r\n\tfor the specific language governing permissions and\r\n\tlimitations under the License.\r\n\tn\t\n\tvar _sjcl = __webpack_require__(1);\n\t\n\tvar sjcl = _interopRequireWildcard(_sjcl);\n\t\n\tvar _jsbn = __webpack_require__(11);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1' + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD' + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245' + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED' + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D' + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F' + '83655D23DCA3AD961C62F356208552BB9ED529077096966D' + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B' + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9' + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510' + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64' + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7' + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B' + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C' + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31' + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\n\t\n\t/** @class */\n\t\n\tvar AuthenticationHelper = function () {\n\t  /**\r\n\t   * Constructs a new AuthenticationHelper object\r\n\t   * @param {string} PoolName Cognito user pool name.\r\n\t   * @param {int} paranoia Random number generation paranoia level.\r\n\t   */\n\t  function AuthenticationHelper(PoolName, paranoia) {\n\t    _classCallCheck(this, AuthenticationHelper);\n\t\n\t    this.N = new _jsbn.BigInteger(initN, 16);\n\t    this.g = new _jsbn.BigInteger('2');\n\t    this.k = new _jsbn.BigInteger(this.hexHash('00' + this.N.toString(16) + '0' + this.g.toString(16)), 16);\n\t\n\t    this.paranoia = paranoia;\n\t\n\t    this.smallAValue = this.generateRandomSmallA();\n\t    this.largeAValue = this.calculateA(this.smallAValue);\n\t\n\t    this.infoBits = sjcl.codec.utf8String.toBits('Caldera Derived Key');\n\t\n\t    this.poolName = PoolName;\n\t  }\n\t\n\t  /**\r\n\t   * @returns {BigInteger} small A, a random number\r\n\t   */\n\t\n\t\n\t  _createClass(AuthenticationHelper, [{\n\t    key: 'getSmallAValue',\n\t    value: function getSmallAValue() {\n\t      return this.smallAValue;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {BigInteger} large A, a value generated from small A\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getLargeAValue',\n\t    value: function getLargeAValue() {\n\t      return this.largeAValue;\n\t    }\n\t\n\t    /**\r\n\t     * helper function to generate a random big integer\r\n\t     * @returns {BigInteger} a random value.\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'generateRandomSmallA',\n\t    value: function generateRandomSmallA() {\n\t      var words = sjcl.random.randomWords(32, this.paranoia);\n\t      var hexRandom = sjcl.codec.hex.fromBits(words);\n\t\n\t      var randomBigInt = new _jsbn.BigInteger(hexRandom, 16);\n\t      var smallABigInt = randomBigInt.mod(this.N);\n\t\n\t      return smallABigInt;\n\t    }\n\t\n\t    /**\r\n\t     * helper function to generate a random string\r\n\t     * @returns {string} a random value.\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'generateRandomString',\n\t    value: function generateRandomString() {\n\t      var words = sjcl.random.randomWords(10, this.paranoia);\n\t      var stringRandom = sjcl.codec.base64.fromBits(words);\n\t\n\t      return stringRandom;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {string} Generated random value included in password hash.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getRandomPassword',\n\t    value: function getRandomPassword() {\n\t      return this.randomPassword;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {string} Generated random value included in devices hash.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getSaltDevices',\n\t    value: function getSaltDevices() {\n\t      return this.SaltToHashDevices;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {string} Value used to verify devices.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getVerifierDevices',\n\t    value: function getVerifierDevices() {\n\t      return this.verifierDevices;\n\t    }\n\t\n\t    /**\r\n\t     * Generate salts and compute verifier.\r\n\t     * @param {string} deviceGroupKey Devices to generate verifier for.\r\n\t     * @param {string} username User to generate verifier for.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'generateHashDevice',\n\t    value: function generateHashDevice(deviceGroupKey, username) {\n\t      this.randomPassword = this.generateRandomString();\n\t      var combinedString = '' + deviceGroupKey + username + ':' + this.randomPassword;\n\t      var hashedString = this.hash(combinedString);\n\t\n\t      var words = sjcl.random.randomWords(4, this.paranoia);\n\t      var hexRandom = sjcl.codec.hex.fromBits(words);\n\t      var saltDevices = new _jsbn.BigInteger(hexRandom, 16);\n\t      var firstCharSalt = saltDevices.toString(16)[0];\n\t      this.SaltToHashDevices = saltDevices.toString(16);\n\t\n\t      if (saltDevices.toString(16).length % 2 === 1) {\n\t        this.SaltToHashDevices = '0' + this.SaltToHashDevices;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharSalt) !== -1) {\n\t        this.SaltToHashDevices = '00' + this.SaltToHashDevices;\n\t      }\n\t      var verifierDevicesNotPadded = this.g.modPow(new _jsbn.BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16), this.N);\n\t\n\t      var firstCharVerifierDevices = verifierDevicesNotPadded.toString(16)[0];\n\t      this.verifierDevices = verifierDevicesNotPadded.toString(16);\n\t\n\t      if (verifierDevicesNotPadded.toString(16).length % 2 === 1) {\n\t        this.verifierDevices = '0' + this.verifierDevices;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharVerifierDevices) !== -1) {\n\t        this.verifierDevices = '00' + this.verifierDevices;\n\t      }\n\t    }\n\t\n\t    /**\r\n\t     * Calculate the client's public value A = g^a%N\r\n\t     * with the generated random number a\r\n\t     * @param {BigInteger} a Randomly generated small A.\r\n\t     * @returns {BigInteger} Computed large A.\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'calculateA',\n\t    value: function calculateA(a) {\n\t      var A = this.g.modPow(a, this.N);\n\t\n\t      if (A.mod(this.N).toString() === '0') {\n\t        throw new Error('Illegal paramater. A mod N cannot be 0.');\n\t      }\n\t      return A;\n\t    }\n\t\n\t    /**\r\n\t     * Calculate the client's value U which is the hash of A and B\r\n\t     * @param {BigInteger} A Large A value.\r\n\t     * @param {BigInteger} B Server B value.\r\n\t     * @returns {BigInteger} Computed U value.\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'calculateU',\n\t    value: function calculateU(A, B) {\n\t      var firstCharA = A.toString(16)[0];\n\t      var firstCharB = B.toString(16)[0];\n\t      var AToHash = A.toString(16);\n\t      var BToHash = B.toString(16);\n\t\n\t      if (A.toString(16).length % 2 === 1) {\n\t        AToHash = '0' + AToHash;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharA) !== -1) {\n\t        AToHash = '00' + AToHash;\n\t      }\n\t\n\t      if (B.toString(16).length % 2 === 1) {\n\t        BToHash = '0' + BToHash;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharB) !== -1) {\n\t        BToHash = '00' + BToHash;\n\t      }\n\t\n\t      this.UHexHash = this.hexHash(AToHash + BToHash);\n\t      var finalU = new _jsbn.BigInteger(this.UHexHash, 16);\n\t\n\t      return finalU;\n\t    }\n\t\n\t    /**\r\n\t     * Calculate a hash from a bitArray\r\n\t     * @param {sjcl.bitArray} bitArray Value to hash.\r\n\t     * @returns {String} Hex-encoded hash.\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'hash',\n\t    value: function hash(bitArray) {\n\t      var hashHex = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(bitArray));\n\t      return new Array(64 - hashHex.length).join('0') + hashHex;\n\t    }\n\t\n\t    /**\r\n\t     * Calculate a hash from a hex string\r\n\t     * @param {String} hexStr Value to hash.\r\n\t     * @returns {String} Hex-encoded hash.\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'hexHash',\n\t    value: function hexHash(hexStr) {\n\t      var hashHex = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(sjcl.codec.hex.toBits(hexStr)));\n\t      return new Array(64 - hashHex.length).join('0') + hashHex;\n\t    }\n\t\n\t    /**\r\n\t     * Standard hkdf algorithm\r\n\t     * @param {sjcl.bitArray} ikm Input key material.\r\n\t     * @param {sjcl.bitArray} salt Salt value.\r\n\t     * @returns {sjcl.bitArray} Strong key material.\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'computehkdf',\n\t    value: function computehkdf(ikm, salt) {\n\t      var mac = new sjcl.misc.hmac(salt, sjcl.hash.sha256);\n\t      mac.update(ikm);\n\t      var prk = mac.digest();\n\t      var hmac = new sjcl.misc.hmac(prk, sjcl.hash.sha256);\n\t      var infoBitsUpdate = sjcl.bitArray.concat(this.infoBits, sjcl.codec.utf8String.toBits(String.fromCharCode(1)));\n\t      hmac.update(infoBitsUpdate);\n\t\n\t      return sjcl.bitArray.clamp(hmac.digest(), 128);\n\t    }\n\t\n\t    /**\r\n\t     * Calculates the final hkdf based on computed S value, and computed U value and the key\r\n\t     * @param {String} username Username.\r\n\t     * @param {String} password Password.\r\n\t     * @param {BigInteger} serverBValue Server B value.\r\n\t     * @param {BigInteger} salt Generated salt.\r\n\t     * @returns {sjcl.bitArray} Computed HKDF value.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getPasswordAuthenticationKey',\n\t    value: function getPasswordAuthenticationKey(username, password, serverBValue, salt) {\n\t      if (serverBValue.mod(this.N).equals(new _jsbn.BigInteger('0', 16))) {\n\t        throw new Error('B cannot be zero.');\n\t      }\n\t\n\t      this.UValue = this.calculateU(this.largeAValue, serverBValue);\n\t\n\t      if (this.UValue.equals(new _jsbn.BigInteger('0', 16))) {\n\t        throw new Error('U cannot be zero.');\n\t      }\n\t\n\t      var usernamePassword = '' + this.poolName + username + ':' + password;\n\t      var usernamePasswordHash = this.hash(usernamePassword);\n\t\n\t      var firstCharSalt = salt.toString(16)[0];\n\t      var SaltToHash = salt.toString(16);\n\t\n\t      if (salt.toString(16).length % 2 === 1) {\n\t        SaltToHash = '0' + SaltToHash;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharSalt) !== -1) {\n\t        SaltToHash = '00' + SaltToHash;\n\t      }\n\t\n\t      var xValue = new _jsbn.BigInteger(this.hexHash(SaltToHash + usernamePasswordHash), 16);\n\t\n\t      var gModPowXN = this.g.modPow(xValue, this.N);\n\t      var intValue2 = serverBValue.subtract(this.k.multiply(gModPowXN));\n\t      var sValue = intValue2.modPow(this.smallAValue.add(this.UValue.multiply(xValue)), this.N).mod(this.N);\n\t\n\t      var SToHash = sValue.toString(16);\n\t      var firstCharS = sValue.toString(16)[0];\n\t\n\t      if (sValue.toString(16).length % 2 === 1) {\n\t        SToHash = '0' + SToHash;\n\t      } else if ('89ABCDEFabcdef'.indexOf(firstCharS) !== -1) {\n\t        SToHash = '00' + SToHash;\n\t      }\n\t\n\t      var UValueToHash = this.UHexHash;\n\t      var firstCharU = this.UHexHash[0];\n\t\n\t      if (this.UHexHash.length % 2 === 1) {\n\t        UValueToHash = '0' + UValueToHash;\n\t      } else if (this.UHexHash.length % 2 === 0 && '89ABCDEFabcdef'.indexOf(firstCharU) !== -1) {\n\t        UValueToHash = '00' + UValueToHash;\n\t      }\n\t\n\t      var hkdf = this.computehkdf(sjcl.codec.hex.toBits(SToHash), sjcl.codec.hex.toBits(UValueToHash));\n\t\n\t      return hkdf;\n\t    }\n\t  }]);\n\t\n\t  return AuthenticationHelper;\n\t}();\n\t\n\texports.default = AuthenticationHelper;\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*\r\n\topyright 2016 Amazon.com,\r\n\tnc. or its affiliates. All Rights Reserved.\r\n\tr\n\ticensed under the Amazon Software License (the \"License\").\r\n\tou may not use this file except in compliance with the\r\n\ticense. A copy of the License is located at\r\n\tr\n\thttp://aws.amazon.com/asl/\r\n\tr\n\tor in the \"license\" file accompanying this file. This file is\r\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\texpress or implied. See the License\r\n\tfor the specific language governing permissions and\r\n\tlimitations under the License.\r\n\tn\t\n\tvar _sjcl = __webpack_require__(1);\n\t\n\tvar sjcl = _interopRequireWildcard(_sjcl);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoAccessToken = function () {\n\t  /**\r\n\t   * Constructs a new CognitoAccessToken object\r\n\t   * @param {string=} AccessToken The JWT access token.\r\n\t   */\n\t  function CognitoAccessToken() {\n\t    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    var AccessToken = _ref.AccessToken;\n\t\n\t    _classCallCheck(this, CognitoAccessToken);\n\t\n\t    // Assign object\n\t    this.jwtToken = AccessToken || '';\n\t  }\n\t\n\t  /**\r\n\t   * @returns {string} the record's token.\r\n\t   */\n\t\n\t\n\t  _createClass(CognitoAccessToken, [{\n\t    key: 'getJwtToken',\n\t    value: function getJwtToken() {\n\t      return this.jwtToken;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {int} the token's expiration (exp member).\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getExpiration',\n\t    value: function getExpiration() {\n\t      var payload = this.jwtToken.split('.')[1];\n\t      var expiration = JSON.parse(sjcl.codec.utf8String.fromBits(sjcl.codec.base64url.toBits(payload)));\n\t      return expiration.exp;\n\t    }\n\t  }]);\n\t\n\t  return CognitoAccessToken;\n\t}();\n\t\n\texports.default = CognitoAccessToken;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\r\n\topyright 2016 Amazon.com,\r\n\tnc. or its affiliates. All Rights Reserved.\r\n\tr\n\ticensed under the Amazon Software License (the \"License\").\r\n\tou may not use this file except in compliance with the\r\n\ticense. A copy of the License is located at\r\n\tr\n\thttp://aws.amazon.com/asl/\r\n\tr\n\tor in the \"license\" file accompanying this file. This file is\r\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * CONDITIONS OF ANY KIND, express or implied. See the License\r\n\tfor the specific language governing permissions and\r\n\tlimitations under the License.\r\n\tn\t\n\tvar _sjcl = __webpack_require__(1);\n\t\n\tvar sjcl = _interopRequireWildcard(_sjcl);\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoIdToken = function () {\n\t  /**\r\n\t   * Constructs a new CognitoIdToken object\r\n\t   * @param {string=} IdToken The JWT Id token\r\n\t   */\n\t  function CognitoIdToken() {\n\t    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    var IdToken = _ref.IdToken;\n\t\n\t    _classCallCheck(this, CognitoIdToken);\n\t\n\t    // Assign object\n\t    this.jwtToken = IdToken || '';\n\t  }\n\t\n\t  /**\r\n\t   * @returns {string} the record's token.\r\n\t   */\n\t\n\t\n\t  _createClass(CognitoIdToken, [{\n\t    key: 'getJwtToken',\n\t    value: function getJwtToken() {\n\t      return this.jwtToken;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {int} the token's expiration (exp member).\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getExpiration',\n\t    value: function getExpiration() {\n\t      var payload = this.jwtToken.split('.')[1];\n\t      var expiration = JSON.parse(sjcl.codec.utf8String.fromBits(sjcl.codec.base64url.toBits(payload)));\n\t      return expiration.exp;\n\t    }\n\t  }]);\n\t\n\t  return CognitoIdToken;\n\t}();\n\t\n\texports.default = CognitoIdToken;\n\n/***/ },\n/* 5 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\r\n\t * Copyright 2016 Amazon.com,\r\n\t * Inc. or its affiliates. All Rights Reserved.\r\n\t *\r\n\t * Licensed under the Amazon Software License (the \"License\").\r\n\t * You may not use this file except in compliance with the\r\n\t * License. A copy of the License is located at\r\n\t *\r\n\t *     http://aws.amazon.com/asl/\r\n\t *\r\n\t * or in the \"license\" file accompanying this file. This file is\r\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\r\n\t * for the specific language governing permissions and\r\n\t * limitations under the License.\r\n\t */\n\t\n\t/** @class */\n\tvar CognitoRefreshToken = function () {\n\t  /**\r\n\t   * Constructs a new CognitoRefreshToken object\r\n\t   * @param {string=} RefreshToken The JWT refresh token.\r\n\t   */\n\t  function CognitoRefreshToken() {\n\t    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    var RefreshToken = _ref.RefreshToken;\n\t\n\t    _classCallCheck(this, CognitoRefreshToken);\n\t\n\t    // Assign object\n\t    this.token = RefreshToken || '';\n\t  }\n\t\n\t  /**\r\n\t   * @returns {string} the record's token.\r\n\t   */\n\t\n\t\n\t  _createClass(CognitoRefreshToken, [{\n\t    key: 'getToken',\n\t    value: function getToken() {\n\t      return this.token;\n\t    }\n\t  }]);\n\t\n\t  return CognitoRefreshToken;\n\t}();\n\t\n\texports.default = CognitoRefreshToken;\n\n/***/ },\n/* 6 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\r\n\topyright 2016 Amazon.com,\r\n\tnc. or its affiliates. All Rights Reserved.\r\n\tr\n\ticensed under the Amazon Software License (the \"License\").\r\n\tou may not use this file except in compliance with the\r\n\ticense. A copy of the License is located at\r\n\tr\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *     http://aws.amazon.com/asl/\r\n\tr\n\tor in the \"license\" file accompanying this file. This file is\r\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      * CONDITIONS OF ANY KIND, express or implied. See the License\r\n\tfor the specific language governing permissions and\r\n\tlimitations under the License.\r\n\tn\t\n\tvar _sjcl = __webpack_require__(1);\n\t\n\tvar sjcl = _interopRequireWildcard(_sjcl);\n\t\n\tvar _jsbn = __webpack_require__(11);\n\t\n\tvar _AuthenticationHelper = __webpack_require__(2);\n\t\n\tvar _AuthenticationHelper2 = _interopRequireDefault(_AuthenticationHelper);\n\t\n\tvar _CognitoAccessToken = __webpack_require__(3);\n\t\n\tvar _CognitoAccessToken2 = _interopRequireDefault(_CognitoAccessToken);\n\t\n\tvar _CognitoIdToken = __webpack_require__(4);\n\t\n\tvar _CognitoIdToken2 = _interopRequireDefault(_CognitoIdToken);\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(5);\n\t\n\tvar _CognitoRefreshToken2 = _interopRequireDefault(_CognitoRefreshToken);\n\t\n\tvar _CognitoUserSession = __webpack_require__(8);\n\t\n\tvar _CognitoUserSession2 = _interopRequireDefault(_CognitoUserSession);\n\t\n\tvar _DateHelper = __webpack_require__(9);\n\t\n\tvar _DateHelper2 = _interopRequireDefault(_DateHelper);\n\t\n\tvar _CognitoUserAttribute = __webpack_require__(7);\n\t\n\tvar _CognitoUserAttribute2 = _interopRequireDefault(_CognitoUserAttribute);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/**\r\n\t * @callback nodeCallback\r\n\t * @template T result\r\n\t * @param {*} err The operation failure reason, or null.\r\n\t * @param {T} result The operation result.\r\n\t */\n\t\n\t/**\r\n\t * @callback onFailure\r\n\t * @param {*} err Failure reason.\r\n\t */\n\t\n\t/**\r\n\t * @callback onSuccess\r\n\t * @template T result\r\n\t * @param {T} result The operation result.\r\n\t */\n\t\n\t/**\r\n\t * @callback mfaRequired\r\n\t * @param {*} details MFA challenge details.\r\n\t */\n\t\n\t/**\r\n\t * @callback customChallenge\r\n\t * @param {*} details Custom challenge details.\r\n\t */\n\t\n\t/**\r\n\t * @callback inputVerificationCode\r\n\t * @param {*} data Server response.\r\n\t */\n\t\n\t/**\r\n\t * @callback authSuccess\r\n\t * @param {CognitoUserSession} session The new session.\r\n\t * @param {bool=} userConfirmationNecessary User must be confirmed.\r\n\t */\n\t\n\t/** @class */\n\tvar CognitoUser = function () {\n\t  /**\r\n\t   * Constructs a new CognitoUser object\r\n\t   * @param {object} data Creation options\r\n\t   * @param {string} data.Username The user's username.\r\n\t   * @param {CognitoUserPool} data.Pool Pool containing the user.\r\n\t   */\n\t  function CognitoUser(data) {\n\t    _classCallCheck(this, CognitoUser);\n\t\n\t    if (data == null || data.Username == null || data.Pool == null) {\n\t      throw new Error('Username and pool information are required.');\n\t    }\n\t\n\t    this.username = data.Username || '';\n\t    this.pool = data.Pool;\n\t    this.Session = null;\n\t\n\t    this.client = data.Pool.client;\n\t\n\t    this.signInUserSession = null;\n\t    this.authenticationFlowType = 'USER_SRP_AUTH';\n\t  }\n\t\n\t  /**\r\n\t   * @returns {CognitoUserSession} the current session for this user\r\n\t   */\n\t\n\t\n\t  _createClass(CognitoUser, [{\n\t    key: 'getSignInUserSession',\n\t    value: function getSignInUserSession() {\n\t      return this.signInUserSession;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {string} the user's username\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getUsername',\n\t    value: function getUsername() {\n\t      return this.username;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {String} the authentication flow type\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getAuthenticationFlowType',\n\t    value: function getAuthenticationFlowType() {\n\t      return this.authenticationFlowType;\n\t    }\n\t\n\t    /**\r\n\t     * sets authentication flow type\r\n\t     * @param {string} authenticationFlowType New value.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'setAuthenticationFlowType',\n\t    value: function setAuthenticationFlowType(authenticationFlowType) {\n\t      this.authenticationFlowType = authenticationFlowType;\n\t    }\n\t\n\t    /**\r\n\t     * This is used for authenticating the user. it calls the AuthenticationHelper for SRP related\r\n\t     * stuff\r\n\t     * @param {AuthenticationDetails} authDetails Contains the authentication data\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\r\n\t     * @param {customChallenge} callback.customChallenge\r\n\t     *    Custom challenge response required to continue.\r\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'authenticateUser',\n\t    value: function authenticateUser(authDetails, callback) {\n\t      var _this = this;\n\t\n\t      var authenticationHelper = new _AuthenticationHelper2.default(this.pool.getUserPoolId().split('_')[1], this.pool.getParanoia());\n\t      var dateHelper = new _DateHelper2.default();\n\t\n\t      var serverBValue = void 0;\n\t      var salt = void 0;\n\t      var authParameters = {};\n\t\n\t      if (this.deviceKey != null) {\n\t        authParameters.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      authParameters.USERNAME = this.username;\n\t      authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\t\n\t      if (this.authenticationFlowType === 'CUSTOM_AUTH') {\n\t        authParameters.CHALLENGE_NAME = 'SRP_A';\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('initiateAuth', {\n\t        AuthFlow: this.authenticationFlowType,\n\t        ClientId: this.pool.getClientId(),\n\t        AuthParameters: authParameters,\n\t        ClientMetadata: authDetails.getValidationData()\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeParameters = data.ChallengeParameters;\n\t\n\t        _this.username = challengeParameters.USER_ID_FOR_SRP;\n\t        serverBValue = new _jsbn.BigInteger(challengeParameters.SRP_B, 16);\n\t        salt = new _jsbn.BigInteger(challengeParameters.SALT, 16);\n\t        _this.getCachedDeviceKeyAndPassword();\n\t\n\t        var hkdf = authenticationHelper.getPasswordAuthenticationKey(_this.username, authDetails.getPassword(), serverBValue, salt);\n\t        var secretBlockBits = sjcl.codec.base64.toBits(challengeParameters.SECRET_BLOCK);\n\t\n\t        var mac = new sjcl.misc.hmac(hkdf, sjcl.hash.sha256);\n\t        mac.update(sjcl.codec.utf8String.toBits(_this.pool.getUserPoolId().split('_')[1]));\n\t        mac.update(sjcl.codec.utf8String.toBits(_this.username));\n\t        mac.update(secretBlockBits);\n\t        var dateNow = dateHelper.getNowString();\n\t        mac.update(sjcl.codec.utf8String.toBits(dateNow));\n\t        var signature = mac.digest();\n\t        var signatureString = sjcl.codec.base64.fromBits(signature);\n\t\n\t        var challengeResponses = {};\n\t\n\t        challengeResponses.USERNAME = _this.username;\n\t        challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n\t        challengeResponses.TIMESTAMP = dateNow;\n\t        challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\t\n\t        if (_this.deviceKey != null) {\n\t          challengeResponses.DEVICE_KEY = _this.deviceKey;\n\t        }\n\t\n\t        _this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t          ChallengeName: 'PASSWORD_VERIFIER',\n\t          ClientId: _this.pool.getClientId(),\n\t          ChallengeResponses: challengeResponses,\n\t          Session: data.Session\n\t        }, function (errAuthenticate, dataAuthenticate) {\n\t          if (errAuthenticate) {\n\t            return callback.onFailure(errAuthenticate);\n\t          }\n\t\n\t          var challengeName = dataAuthenticate.ChallengeName;\n\t          if (challengeName === 'SMS_MFA') {\n\t            _this.Session = dataAuthenticate.Session;\n\t            return callback.mfaRequired(challengeName);\n\t          }\n\t\n\t          if (challengeName === 'CUSTOM_CHALLENGE') {\n\t            _this.Session = dataAuthenticate.Session;\n\t            return callback.customChallenge(dataAuthenticate.ChallengeParameters);\n\t          }\n\t\n\t          if (challengeName === 'DEVICE_SRP_AUTH') {\n\t            _this.getDeviceResponse(callback);\n\t            return undefined;\n\t          }\n\t\n\t          _this.signInUserSession = _this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t          _this.cacheTokens();\n\t\n\t          var newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\n\t          if (newDeviceMetadata == null) {\n\t            return callback.onSuccess(_this.signInUserSession);\n\t          }\n\t\n\t          authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\t\n\t          var deviceSecretVerifierConfig = {\n\t            Salt: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(authenticationHelper.getSaltDevices().toString(16))),\n\t            PasswordVerifier: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(authenticationHelper.getVerifierDevices().toString(16)))\n\t          };\n\t\n\t          _this.verifierDevices = sjcl.codec.base64.fromBits(authenticationHelper.getVerifierDevices());\n\t          _this.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\n\t          _this.randomPassword = authenticationHelper.getRandomPassword();\n\t\n\t          _this.client.makeUnauthenticatedRequest('confirmDevice', {\n\t            DeviceKey: newDeviceMetadata.DeviceKey,\n\t            AccessToken: _this.signInUserSession.getAccessToken().getJwtToken(),\n\t            DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n\t            DeviceName: navigator.userAgent\n\t          }, function (errConfirm, dataConfirm) {\n\t            if (errConfirm) {\n\t              return callback.onFailure(errConfirm);\n\t            }\n\t            _this.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\t            _this.cacheDeviceKeyAndPassword();\n\t            if (dataConfirm.UserConfirmationNecessary === true) {\n\t              return callback.onSuccess(_this.signInUserSession, dataConfirm.UserConfirmationNecessary);\n\t            }\n\t            return callback.onSuccess(_this.signInUserSession);\n\t          });\n\t          return undefined;\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used to get a session using device authentication. It is called at the end of user\r\n\t     * authentication\r\n\t     *\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n\t     * @returns {void}\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getDeviceResponse',\n\t    value: function getDeviceResponse(callback) {\n\t      var _this2 = this;\n\t\n\t      var authenticationHelper = new _AuthenticationHelper2.default(this.deviceGroupKey, this.pool.getParanoia());\n\t      var dateHelper = new _DateHelper2.default();\n\t\n\t      var authParameters = {};\n\t\n\t      authParameters.USERNAME = this.username;\n\t      authParameters.DEVICE_KEY = this.deviceKey;\n\t      authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'DEVICE_SRP_AUTH',\n\t        ClientId: this.pool.getClientId(),\n\t        ChallengeResponses: authParameters\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeParameters = data.ChallengeParameters;\n\t\n\t        var serverBValue = new _jsbn.BigInteger(challengeParameters.SRP_B, 16);\n\t        var salt = new _jsbn.BigInteger(challengeParameters.SALT, 16);\n\t\n\t        var hkdf = authenticationHelper.getPasswordAuthenticationKey(_this2.deviceKey, _this2.randomPassword, serverBValue, salt);\n\t        var secretBlockBits = sjcl.codec.base64.toBits(challengeParameters.SECRET_BLOCK);\n\t\n\t        var mac = new sjcl.misc.hmac(hkdf, sjcl.hash.sha256);\n\t        mac.update(sjcl.codec.utf8String.toBits(_this2.deviceGroupKey));\n\t        mac.update(sjcl.codec.utf8String.toBits(_this2.deviceKey));\n\t        mac.update(secretBlockBits);\n\t        var dateNow = dateHelper.getNowString();\n\t        mac.update(sjcl.codec.utf8String.toBits(dateNow));\n\t        var signature = mac.digest();\n\t        var signatureString = sjcl.codec.base64.fromBits(signature);\n\t\n\t        var challengeResponses = {};\n\t\n\t        challengeResponses.USERNAME = _this2.username;\n\t        challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\n\t        challengeResponses.TIMESTAMP = dateNow;\n\t        challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\n\t        challengeResponses.DEVICE_KEY = _this2.deviceKey;\n\t\n\t        _this2.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t          ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\n\t          ClientId: _this2.pool.getClientId(),\n\t          ChallengeResponses: challengeResponses,\n\t          Session: data.Session\n\t        }, function (errAuthenticate, dataAuthenticate) {\n\t          if (errAuthenticate) {\n\t            return callback.onFailure(errAuthenticate);\n\t          }\n\t\n\t          _this2.signInUserSession = _this2.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t          _this2.cacheTokens();\n\t\n\t          return callback.onSuccess(_this2.signInUserSession);\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used for a certain user to confirm the registration by using a confirmation code\r\n\t     * @param {string} confirmationCode Code entered by user.\r\n\t     * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\r\n\t     * @param {nodeCallback<string>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'confirmRegistration',\n\t    value: function confirmRegistration(confirmationCode, forceAliasCreation, callback) {\n\t      this.client.makeUnauthenticatedRequest('confirmSignUp', {\n\t        ClientId: this.pool.getClientId(),\n\t        ConfirmationCode: confirmationCode,\n\t        Username: this.username,\n\t        ForceAliasCreation: forceAliasCreation\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used by the user once he has the responses to a custom challenge\r\n\t     * @param {string} answerChallenge The custom challange answer.\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {customChallenge} callback.customChallenge\r\n\t     *    Custom challenge response required to continue.\r\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'sendCustomChallengeAnswer',\n\t    value: function sendCustomChallengeAnswer(answerChallenge, callback) {\n\t      var _this3 = this;\n\t\n\t      var challengeResponses = {};\n\t      challengeResponses.USERNAME = this.username;\n\t      challengeResponses.ANSWER = answerChallenge;\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'CUSTOM_CHALLENGE',\n\t        ChallengeResponses: challengeResponses,\n\t        ClientId: this.pool.getClientId(),\n\t        Session: this.Session\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        var challengeName = data.ChallengeName;\n\t\n\t        if (challengeName === 'CUSTOM_CHALLENGE') {\n\t          _this3.Session = data.Session;\n\t          return callback.customChallenge(data.challengeParameters);\n\t        }\n\t\n\t        _this3.signInUserSession = _this3.getCognitoUserSession(data.AuthenticationResult);\n\t        _this3.cacheTokens();\n\t        return callback.onSuccess(_this3.signInUserSession);\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used by the user once he has an MFA code\r\n\t     * @param {string} confirmationCode The MFA code entered by the user.\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'sendMFACode',\n\t    value: function sendMFACode(confirmationCode, callback) {\n\t      var _this4 = this;\n\t\n\t      var challengeResponses = {};\n\t      challengeResponses.USERNAME = this.username;\n\t      challengeResponses.SMS_MFA_CODE = confirmationCode;\n\t\n\t      if (this.deviceKey != null) {\n\t        challengeResponses.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\n\t        ChallengeName: 'SMS_MFA',\n\t        ChallengeResponses: challengeResponses,\n\t        ClientId: this.pool.getClientId(),\n\t        Session: this.Session\n\t      }, function (err, dataAuthenticate) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t\n\t        _this4.signInUserSession = _this4.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\n\t        _this4.cacheTokens();\n\t\n\t        if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\n\t          return callback.onSuccess(_this4.signInUserSession);\n\t        }\n\t\n\t        var authenticationHelper = new _AuthenticationHelper2.default(_this4.pool.getUserPoolId().split('_')[1], _this4.pool.getParanoia());\n\t        authenticationHelper.generateHashDevice(dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey, dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\n\t\n\t        var deviceSecretVerifierConfig = {\n\t          Salt: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(authenticationHelper.getSaltDevices().toString(16))),\n\t          PasswordVerifier: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(authenticationHelper.getVerifierDevices().toString(16)))\n\t        };\n\t\n\t        _this4.verifierDevices = sjcl.codec.base64.fromBits(authenticationHelper.getVerifierDevices());\n\t        _this4.deviceGroupKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey;\n\t        _this4.randomPassword = authenticationHelper.getRandomPassword();\n\t\n\t        _this4.client.makeUnauthenticatedRequest('confirmDevice', {\n\t          DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\n\t          AccessToken: _this4.signInUserSession.getAccessToken().getJwtToken(),\n\t          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\n\t          DeviceName: navigator.userAgent\n\t        }, function (errConfirm, dataConfirm) {\n\t          if (errConfirm) {\n\t            return callback.onFailure(errConfirm);\n\t          }\n\t\n\t          _this4.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\n\t          _this4.cacheDeviceKeyAndPassword();\n\t          if (dataConfirm.UserConfirmationNecessary === true) {\n\t            return callback.onSuccess(_this4.signInUserSession, dataConfirm.UserConfirmationNecessary);\n\t          }\n\t          return callback.onSuccess(_this4.signInUserSession);\n\t        });\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used by an authenticated user to change the current password\r\n\t     * @param {string} oldUserPassword The current password.\r\n\t     * @param {string} newUserPassword The requested new password.\r\n\t     * @param {nodeCallback<string>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'changePassword',\n\t    value: function changePassword(oldUserPassword, newUserPassword, callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('changePassword', {\n\t        PreviousPassword: oldUserPassword,\n\t        ProposedPassword: newUserPassword,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used by an authenticated user to enable MFA for himself\r\n\t     * @param {nodeCallback<string>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'enableMFA',\n\t    value: function enableMFA(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      var mfaOptions = [];\n\t      var mfaEnabled = {\n\t        DeliveryMedium: 'SMS',\n\t        AttributeName: 'phone_number'\n\t      };\n\t      mfaOptions.push(mfaEnabled);\n\t\n\t      this.client.makeUnauthenticatedRequest('setUserSettings', {\n\t        MFAOptions: mfaOptions,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used by an authenticated user to disable MFA for himself\r\n\t     * @param {nodeCallback<string>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'disableMFA',\n\t    value: function disableMFA(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      var mfaOptions = [];\n\t\n\t      this.client.makeUnauthenticatedRequest('setUserSettings', {\n\t        MFAOptions: mfaOptions,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used by an authenticated user to delete himself\r\n\t     * @param {nodeCallback<string>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'deleteUser',\n\t    value: function deleteUser(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('deleteUser', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\r\n\t     */\n\t    /**\r\n\t     * This is used by an authenticated user to change a list of attributes\r\n\t     * @param {AttributeArg[]} attributes A list of the new user attributes.\r\n\t     * @param {nodeCallback<string>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'updateAttributes',\n\t    value: function updateAttributes(attributes, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateUserAttributes', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        UserAttributes: attributes\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used by an authenticated user to get a list of attributes\r\n\t     * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getUserAttributes',\n\t    value: function getUserAttributes(callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getUser', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err, userData) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t\n\t        var attributeList = [];\n\t\n\t        for (var i = 0; i < userData.UserAttributes.length; i++) {\n\t          var attribute = {\n\t            Name: userData.UserAttributes[i].Name,\n\t            Value: userData.UserAttributes[i].Value\n\t          };\n\t          var userAttribute = new _CognitoUserAttribute2.default(attribute);\n\t          attributeList.push(userAttribute);\n\t        }\n\t\n\t        return callback(null, attributeList);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used by an authenticated user to delete a list of attributes\r\n\t     * @param {string[]} attributeList Names of the attributes to delete.\r\n\t     * @param {nodeCallback<string>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'deleteAttributes',\n\t    value: function deleteAttributes(attributeList, callback) {\n\t      if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('deleteUserAttributes', {\n\t        UserAttributeNames: attributeList,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used by a user to resend a confirmation code\r\n\t     * @param {nodeCallback<string>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'resendConfirmationCode',\n\t    value: function resendConfirmationCode(callback) {\n\t      this.client.makeUnauthenticatedRequest('resendConfirmationCode', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        return callback(null, 'SUCCESS');\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used to get a session, either from the session object\r\n\t     * or from  the local storage, or by using a refresh token\r\n\t     *\r\n\t     * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getSession',\n\t    value: function getSession(callback) {\n\t      if (this.username == null) {\n\t        return callback(new Error('Username is null. Cannot retrieve a new session'), null);\n\t      }\n\t\n\t      if (this.signInUserSession != null && this.signInUserSession.isValid()) {\n\t        return callback(null, this.signInUserSession);\n\t      }\n\t\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var idTokenKey = keyPrefix + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.refreshToken';\n\t\n\t      var storage = window.localStorage;\n\t\n\t      if (storage.getItem(idTokenKey)) {\n\t        var idToken = new _CognitoIdToken2.default({\n\t          IdToken: storage.getItem(idTokenKey)\n\t        });\n\t        var accessToken = new _CognitoAccessToken2.default({\n\t          AccessToken: storage.getItem(accessTokenKey)\n\t        });\n\t        var refreshToken = new _CognitoRefreshToken2.default({\n\t          RefreshToken: storage.getItem(refreshTokenKey)\n\t        });\n\t\n\t        var sessionData = {\n\t          IdToken: idToken,\n\t          AccessToken: accessToken,\n\t          RefreshToken: refreshToken\n\t        };\n\t        var cachedSession = new _CognitoUserSession2.default(sessionData);\n\t        if (cachedSession.isValid()) {\n\t          this.signInUserSession = cachedSession;\n\t          return callback(null, this.signInUserSession);\n\t        }\n\t\n\t        if (refreshToken.getToken() == null) {\n\t          return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\n\t        }\n\t\n\t        this.refreshSession(refreshToken, callback);\n\t      }\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This uses the refreshToken to retrieve a new session\r\n\t     * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\r\n\t     * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'refreshSession',\n\t    value: function refreshSession(refreshToken, callback) {\n\t      var _this5 = this;\n\t\n\t      var authParameters = {};\n\t      authParameters.REFRESH_TOKEN = refreshToken.getToken();\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t      var storage = window.localStorage;\n\t\n\t      if (storage.getItem(lastUserKey)) {\n\t        this.username = storage.getItem(lastUserKey);\n\t        var deviceKeyKey = keyPrefix + '.' + this.username + '.deviceKey';\n\t        this.deviceKey = storage.getItem(deviceKeyKey);\n\t        authParameters.DEVICE_KEY = this.deviceKey;\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('initiateAuth', {\n\t        ClientId: this.pool.getClientId(),\n\t        AuthFlow: 'REFRESH_TOKEN_AUTH',\n\t        AuthParameters: authParameters\n\t      }, function (err, authResult) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t        if (authResult) {\n\t          var authenticationResult = authResult.AuthenticationResult;\n\t          if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\n\t            authenticationResult.RefreshToken = refreshToken.getToken();\n\t          }\n\t          _this5.signInUserSession = _this5.getCognitoUserSession(authenticationResult);\n\t          _this5.cacheTokens();\n\t          return callback(null, _this5.signInUserSession);\n\t        }\n\t        return undefined;\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used to save the session tokens to local storage\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'cacheTokens',\n\t    value: function cacheTokens() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t\n\t      var storage = window.localStorage;\n\t\n\t      storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\n\t      storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\n\t      storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\n\t      storage.setItem(lastUserKey, this.username);\n\t    }\n\t\n\t    /**\r\n\t     * This is used to cache the device key and device group and device password\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'cacheDeviceKeyAndPassword',\n\t    value: function cacheDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      var storage = window.localStorage;\n\t\n\t      storage.setItem(deviceKeyKey, this.deviceKey);\n\t      storage.setItem(randomPasswordKey, this.randomPassword);\n\t      storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\n\t    }\n\t\n\t    /**\r\n\t     * This is used to get current device key and device group and device password\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getCachedDeviceKeyAndPassword',\n\t    value: function getCachedDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      var storage = window.localStorage;\n\t\n\t      if (storage.getItem(deviceKeyKey)) {\n\t        this.deviceKey = storage.getItem(deviceKeyKey);\n\t        this.randomPassword = storage.getItem(randomPasswordKey);\n\t        this.deviceGroupKey = storage.getItem(deviceGroupKeyKey);\n\t      }\n\t    }\n\t\n\t    /**\r\n\t     * This is used to clear the device key info from local storage\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'clearCachedDeviceKeyAndPassword',\n\t    value: function clearCachedDeviceKeyAndPassword() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId() + '.' + this.username;\n\t      var deviceKeyKey = keyPrefix + '.deviceKey';\n\t      var randomPasswordKey = keyPrefix + '.randomPasswordKey';\n\t      var deviceGroupKeyKey = keyPrefix + '.deviceGroupKey';\n\t\n\t      var storage = window.localStorage;\n\t\n\t      storage.removeItem(deviceKeyKey);\n\t      storage.removeItem(randomPasswordKey);\n\t      storage.removeItem(deviceGroupKeyKey);\n\t    }\n\t\n\t    /**\r\n\t     * This is used to clear the session tokens from local storage\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'clearCachedTokens',\n\t    value: function clearCachedTokens() {\n\t      var keyPrefix = 'CognitoIdentityServiceProvider.' + this.pool.getClientId();\n\t      var idTokenKey = keyPrefix + '.' + this.username + '.idToken';\n\t      var accessTokenKey = keyPrefix + '.' + this.username + '.accessToken';\n\t      var refreshTokenKey = keyPrefix + '.' + this.username + '.refreshToken';\n\t      var lastUserKey = keyPrefix + '.LastAuthUser';\n\t\n\t      var storage = window.localStorage;\n\t\n\t      storage.removeItem(idTokenKey);\n\t      storage.removeItem(accessTokenKey);\n\t      storage.removeItem(refreshTokenKey);\n\t      storage.removeItem(lastUserKey);\n\t    }\n\t\n\t    /**\r\n\t     * This is used to build a user session from tokens retrieved in the authentication result\r\n\t     * @param {object} authResult Successful auth response from server.\r\n\t     * @returns {CognitoUserSession} The new user session.\r\n\t     * @private\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getCognitoUserSession',\n\t    value: function getCognitoUserSession(authResult) {\n\t      var idToken = new _CognitoIdToken2.default(authResult);\n\t      var accessToken = new _CognitoAccessToken2.default(authResult);\n\t      var refreshToken = new _CognitoRefreshToken2.default(authResult);\n\t\n\t      var sessionData = {\n\t        IdToken: idToken,\n\t        AccessToken: accessToken,\n\t        RefreshToken: refreshToken\n\t      };\n\t\n\t      return new _CognitoUserSession2.default(sessionData);\n\t    }\n\t\n\t    /**\r\n\t     * This is used to initiate a forgot password request\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {inputVerificationCode?} callback.inputVerificationCode\r\n\t     *    Optional callback raised instead of onSuccess with response data.\r\n\t     * @param {onSuccess<void>?} callback.onSuccess Called on success.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'forgotPassword',\n\t    value: function forgotPassword(callback) {\n\t      this.client.makeUnauthenticatedRequest('forgotPassword', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        if (typeof callback.inputVerificationCode === 'function') {\n\t          return callback.inputVerificationCode(data);\n\t        }\n\t        return callback.onSuccess();\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used to confirm a new password using a confirmationCode\r\n\t     * @param {string} confirmationCode Code entered by user.\r\n\t     * @param {string} newPassword Confirm new password.\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {onSuccess<void>} callback.onSuccess Called on success.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'confirmPassword',\n\t    value: function confirmPassword(confirmationCode, newPassword, callback) {\n\t      this.client.makeUnauthenticatedRequest('confirmForgotPassword', {\n\t        ClientId: this.pool.getClientId(),\n\t        Username: this.username,\n\t        ConfirmationCode: confirmationCode,\n\t        Password: newPassword\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess();\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * This is used to initiate an attribute confirmation request\r\n\t     * @param {string} attributeName User attribute that needs confirmation.\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getAttributeVerificationCode',\n\t    value: function getAttributeVerificationCode(attributeName, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getUserAttributeVerificationCode', {\n\t        AttributeName: attributeName,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.inputVerificationCode(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used to confirm an attribute using a confirmation code\r\n\t     * @param {string} attributeName Attribute being confirmed.\r\n\t     * @param {string} confirmationCode Code entered by user.\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'verifyAttribute',\n\t    value: function verifyAttribute(attributeName, confirmationCode, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('verifyUserAttribute', {\n\t        AttributeName: attributeName,\n\t        Code: confirmationCode,\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used to get the device information using the current device key\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getDevice',\n\t    value: function getDevice(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('getDevice', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used to forget the current device\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'forgetDevice',\n\t    value: function forgetDevice(callback) {\n\t      var _this6 = this;\n\t\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('forgetDevice', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        _this6.deviceKey = null;\n\t        _this6.deviceGroupkey = null;\n\t        _this6.randomPassword = null;\n\t        _this6.clearCachedDeviceKeyAndPassword();\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used to set the device status as remembered\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'setDeviceStatusRemembered',\n\t    value: function setDeviceStatusRemembered(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey,\n\t        DeviceRememberedStatus: 'remembered'\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used to set the device status as not remembered\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'setDeviceStatusNotRemembered',\n\t    value: function setDeviceStatusNotRemembered(callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        DeviceKey: this.deviceKey,\n\t        DeviceRememberedStatus: 'not_remembered'\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used to list all devices for a user\r\n\t     *\r\n\t     * @param {int} limit the number of devices returned in a call\r\n\t     * @param {string} paginationToken the pagination token in case any was returned before\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'listDevices',\n\t    value: function listDevices(limit, paginationToken, callback) {\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('listDevices', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\n\t        Limit: limit,\n\t        PaginationToken: paginationToken\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        return callback.onSuccess(data);\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used to globally revoke all tokens issued to a user\r\n\t     * @param {object} callback Result callback map.\r\n\t     * @param {onFailure} callback.onFailure Called on any error.\r\n\t     * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'globalSignOut',\n\t    value: function globalSignOut(callback) {\n\t      var _this7 = this;\n\t\n\t      if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\n\t        return callback(new Error('User is not authenticated'), null);\n\t      }\n\t\n\t      this.client.makeUnauthenticatedRequest('globalSignOut', {\n\t        AccessToken: this.signInUserSession.getAccessToken().getJwtToken()\n\t      }, function (err) {\n\t        if (err) {\n\t          return callback.onFailure(err);\n\t        }\n\t        _this7.clearCachedTokens();\n\t        return callback.onSuccess('SUCCESS');\n\t      });\n\t      return undefined;\n\t    }\n\t\n\t    /**\r\n\t     * This is used for the user to signOut of the application and clear the cached tokens.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'signOut',\n\t    value: function signOut() {\n\t      this.signInUserSession = null;\n\t      this.clearCachedTokens();\n\t    }\n\t  }]);\n\t\n\t  return CognitoUser;\n\t}();\n\t\n\texports.default = CognitoUser;\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\r\n\t * Copyright 2016 Amazon.com,\r\n\t * Inc. or its affiliates. All Rights Reserved.\r\n\t *\r\n\t * Licensed under the Amazon Software License (the \"License\").\r\n\t * You may not use this file except in compliance with the\r\n\t * License. A copy of the License is located at\r\n\t *\r\n\t *     http://aws.amazon.com/asl/\r\n\t *\r\n\t * or in the \"license\" file accompanying this file. This file is\r\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\r\n\t * for the specific language governing permissions and\r\n\t * limitations under the License.\r\n\t */\n\t\n\t/** @class */\n\tvar CognitoUserAttribute = function () {\n\t  /**\r\n\t   * Constructs a new CognitoUserAttribute object\r\n\t   * @param {string=} Name The record's name\r\n\t   * @param {string=} Value The record's value\r\n\t   */\n\t  function CognitoUserAttribute() {\n\t    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    var Name = _ref.Name;\n\t    var Value = _ref.Value;\n\t\n\t    _classCallCheck(this, CognitoUserAttribute);\n\t\n\t    this.Name = Name || '';\n\t    this.Value = Value || '';\n\t  }\n\t\n\t  /**\r\n\t   * @returns {string} the record's value.\r\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserAttribute, [{\n\t    key: 'getValue',\n\t    value: function getValue() {\n\t      return this.Value;\n\t    }\n\t\n\t    /**\r\n\t     * Sets the record's value.\r\n\t     * @param {string} value The new value.\r\n\t     * @returns {CognitoUserAttribute} The record for method chaining.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'setValue',\n\t    value: function setValue(value) {\n\t      this.Value = value;\n\t      return this;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {string} the record's name.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getName',\n\t    value: function getName() {\n\t      return this.Name;\n\t    }\n\t\n\t    /**\r\n\t     * Sets the record's name\r\n\t     * @param {string} name The new name.\r\n\t     * @returns {CognitoUserAttribute} The record for method chaining.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'setName',\n\t    value: function setName(name) {\n\t      this.Name = name;\n\t      return this;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {string} a string representation of the record.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'toString',\n\t    value: function toString() {\n\t      return JSON.stringify(this);\n\t    }\n\t\n\t    /**\r\n\t     * @returns {object} a flat object representing the record.\r\n\t     */\n\t\n\t  }, {\n\t    key: 'toJSON',\n\t    value: function toJSON() {\n\t      return {\n\t        Name: this.Name,\n\t        Value: this.Value\n\t      };\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserAttribute;\n\t}();\n\t\n\texports.default = CognitoUserAttribute;\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\r\n\t * Copyright 2016 Amazon.com,\r\n\t * Inc. or its affiliates. All Rights Reserved.\r\n\t *\r\n\t * Licensed under the Amazon Software License (the \"License\").\r\n\t * You may not use this file except in compliance with the\r\n\t * License. A copy of the License is located at\r\n\t *\r\n\t *     http://aws.amazon.com/asl/\r\n\t *\r\n\t * or in the \"license\" file accompanying this file. This file is\r\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\r\n\t * for the specific language governing permissions and\r\n\t * limitations under the License.\r\n\t */\n\t\n\t/** @class */\n\tvar CognitoUserSession = function () {\n\t  /**\r\n\t   * Constructs a new CognitoUserSession object\r\n\t   * @param {string} IdToken The session's Id token.\r\n\t   * @param {string=} RefreshToken The session's refresh token.\r\n\t   * @param {string} AccessToken The session's access token.\r\n\t   */\n\t  function CognitoUserSession() {\n\t    var _ref = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];\n\t\n\t    var IdToken = _ref.IdToken;\n\t    var RefreshToken = _ref.RefreshToken;\n\t    var AccessToken = _ref.AccessToken;\n\t\n\t    _classCallCheck(this, CognitoUserSession);\n\t\n\t    if (AccessToken == null || IdToken == null) {\n\t      throw new Error('Id token and Access Token must be present.');\n\t    }\n\t\n\t    this.idToken = IdToken;\n\t    this.refreshToken = RefreshToken;\n\t    this.accessToken = AccessToken;\n\t  }\n\t\n\t  /**\r\n\t   * @returns {CognitoIdToken} the session's Id token\r\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserSession, [{\n\t    key: 'getIdToken',\n\t    value: function getIdToken() {\n\t      return this.idToken;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {CognitoRefreshToken} the session's refresh token\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getRefreshToken',\n\t    value: function getRefreshToken() {\n\t      return this.refreshToken;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {CognitoAccessToken} the session's access token\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getAccessToken',\n\t    value: function getAccessToken() {\n\t      return this.accessToken;\n\t    }\n\t\n\t    /**\r\n\t     * Checks to see if the session is still valid based on session expiry information found\r\n\t     * in tokens and the current time\r\n\t     * @returns {boolean} if the session is still valid\r\n\t     */\n\t\n\t  }, {\n\t    key: 'isValid',\n\t    value: function isValid() {\n\t      var now = Math.floor(new Date() / 1000);\n\t\n\t      return now < this.accessToken.getExpiration() && now < this.idToken.getExpiration();\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserSession;\n\t}();\n\t\n\texports.default = CognitoUserSession;\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t    value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\r\n\t * Copyright 2016 Amazon.com,\r\n\t * Inc. or its affiliates. All Rights Reserved.\r\n\t *\r\n\t * Licensed under the Amazon Software License (the \"License\").\r\n\t * You may not use this file except in compliance with the\r\n\t * License. A copy of the License is located at\r\n\t *\r\n\t *     http://aws.amazon.com/asl/\r\n\t *\r\n\t * or in the \"license\" file accompanying this file. This file is\r\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\r\n\t * for the specific language governing permissions and\r\n\t * limitations under the License.\r\n\t */\n\t\n\tvar monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\tvar weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\t\n\t/** @class */\n\t\n\tvar DateHelper = function () {\n\t    function DateHelper() {\n\t        _classCallCheck(this, DateHelper);\n\t    }\n\t\n\t    _createClass(DateHelper, [{\n\t        key: 'getNowString',\n\t\n\t        /**\r\n\t         * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\r\n\t         */\n\t        value: function getNowString() {\n\t            var now = new Date();\n\t\n\t            var weekDay = weekNames[now.getUTCDay()];\n\t            var month = monthNames[now.getUTCMonth()];\n\t            var day = now.getUTCDate();\n\t\n\t            var hours = now.getUTCHours();\n\t            if (hours < 10) {\n\t                hours = '0' + hours;\n\t            }\n\t\n\t            var minutes = now.getUTCMinutes();\n\t            if (minutes < 10) {\n\t                minutes = '0' + minutes;\n\t            }\n\t\n\t            var seconds = now.getUTCSeconds();\n\t            if (seconds < 10) {\n\t                seconds = '0' + seconds;\n\t            }\n\t\n\t            var year = now.getUTCFullYear();\n\t\n\t            // ddd MMM D HH:mm:ss UTC YYYY\n\t            var dateNow = weekDay + ' ' + month + ' ' + day + ' ' + hours + ':' + minutes + ':' + seconds + ' UTC ' + year;\n\t\n\t            return dateNow;\n\t        }\n\t    }]);\n\t\n\t    return DateHelper;\n\t}();\n\t\n\texports.default = DateHelper;\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\tmodule.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/*!\r\n\t * Copyright 2016 Amazon.com,\r\n\t * Inc. or its affiliates. All Rights Reserved.\r\n\t *\r\n\t * Licensed under the Amazon Software License (the \"License\").\r\n\t * You may not use this file except in compliance with the\r\n\t * License. A copy of the License is located at\r\n\t *\r\n\t *     http://aws.amazon.com/asl/\r\n\t *\r\n\t * or in the \"license\" file accompanying this file. This file is\r\n\t * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\t * CONDITIONS OF ANY KIND, express or implied. See the License\r\n\t * for the specific language governing permissions and\r\n\t * limitations under the License.\r\n\t */\n\t\n\t/** @class */\n\tvar AuthenticationDetails = function () {\n\t  /**\r\n\t   * Constructs a new AuthenticationDetails object\r\n\t   * @param {object=} data Creation options.\r\n\t   * @param {string} data.Username User being authenticated.\r\n\t   * @param {string} data.Password Plain-text password to authenticate with.\r\n\t   * @param {(AttributeArg[])?} data.ValidationData Application extra metadata.\r\n\t   */\n\t  function AuthenticationDetails(data) {\n\t    _classCallCheck(this, AuthenticationDetails);\n\t\n\t    var _ref = data || {};\n\t\n\t    var ValidationData = _ref.ValidationData;\n\t    var Username = _ref.Username;\n\t    var Password = _ref.Password;\n\t\n\t    this.validationData = ValidationData || [];\n\t    this.username = Username;\n\t    this.password = Password;\n\t  }\n\t\n\t  /**\r\n\t   * @returns {string} the record's username\r\n\t   */\n\t\n\t\n\t  _createClass(AuthenticationDetails, [{\n\t    key: \"getUsername\",\n\t    value: function getUsername() {\n\t      return this.username;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {string} the record's password\r\n\t     */\n\t\n\t  }, {\n\t    key: \"getPassword\",\n\t    value: function getPassword() {\n\t      return this.password;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {Array} the record's validationData\r\n\t     */\n\t\n\t  }, {\n\t    key: \"getValidationData\",\n\t    value: function getValidationData() {\n\t      return this.validationData;\n\t    }\n\t  }]);\n\t\n\t  return AuthenticationDetails;\n\t}();\n\t\n\texports.default = AuthenticationDetails;\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); /*!\r\n\topyright 2016 Amazon.com,\r\n\tnc. or its affiliates. All Rights Reserved.\r\n\t                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      *\r\n\ticensed under the Amazon Software License (the \"License\").\r\n\tou may not use this file except in compliance with the\r\n\ticense. A copy of the License is located at\r\n\tr\n\thttp://aws.amazon.com/asl/\r\n\tr\n\tor in the \"license\" file accompanying this file. This file is\r\n\tdistributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n\texpress or implied. See the License\r\n\tfor the specific language governing permissions and\r\n\tlimitations under the License.\r\n\tn\t\n\tvar _cognitoidentityserviceprovider = __webpack_require__(10);\n\t\n\tvar _cognitoidentityserviceprovider2 = _interopRequireDefault(_cognitoidentityserviceprovider);\n\t\n\tvar _CognitoUser = __webpack_require__(6);\n\t\n\tvar _CognitoUser2 = _interopRequireDefault(_CognitoUser);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\t/** @class */\n\tvar CognitoUserPool = function () {\n\t  /**\r\n\t   * Constructs a new CognitoUserPool object\r\n\t   * @param {object} data Creation options.\r\n\t   * @param {string} data.UserPoolId Cognito user pool id.\r\n\t   * @param {string} data.ClientId User pool application client id.\r\n\t   * @param {int=} data.Paranoia Random number generation paranoia level.\r\n\t   */\n\t  function CognitoUserPool(data) {\n\t    _classCallCheck(this, CognitoUserPool);\n\t\n\t    var _ref = data || {};\n\t\n\t    var UserPoolId = _ref.UserPoolId;\n\t    var ClientId = _ref.ClientId;\n\t    var Paranoia = _ref.Paranoia;\n\t\n\t    if (!UserPoolId || !ClientId) {\n\t      throw new Error('Both UserPoolId and ClientId are required.');\n\t    }\n\t    if (!/^[\\w-]+_.+$/.test(UserPoolId)) {\n\t      throw new Error('Invalid UserPoolId format.');\n\t    }\n\t    var region = UserPoolId.split('_')[0];\n\t\n\t    this.userPoolId = UserPoolId;\n\t    this.clientId = ClientId;\n\t    this.paranoia = Paranoia || 0;\n\t\n\t    this.client = new _cognitoidentityserviceprovider2.default({ apiVersion: '2016-04-19', region: region });\n\t  }\n\t\n\t  /**\r\n\t   * @returns {string} the user pool id\r\n\t   */\n\t\n\t\n\t  _createClass(CognitoUserPool, [{\n\t    key: 'getUserPoolId',\n\t    value: function getUserPoolId() {\n\t      return this.userPoolId;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {string} the client id\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getClientId',\n\t    value: function getClientId() {\n\t      return this.clientId;\n\t    }\n\t\n\t    /**\r\n\t     * @returns {int} the paranoia level\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getParanoia',\n\t    value: function getParanoia() {\n\t      return this.paranoia;\n\t    }\n\t\n\t    /**\r\n\t     * sets paranoia level\r\n\t     * @param {int} paranoia The new paranoia level.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'setParanoia',\n\t    value: function setParanoia(paranoia) {\n\t      this.paranoia = paranoia;\n\t    }\n\t\n\t    /**\r\n\t     * @typedef {object} SignUpResult\r\n\t     * @property {CognitoUser} user New user.\r\n\t     * @property {bool} userConfirmed If the user is already confirmed.\r\n\t     */\n\t    /**\r\n\t     * method for signing up a user\r\n\t     * @param {string} username User's username.\r\n\t     * @param {string} password Plain-text initial password entered by user.\r\n\t     * @param {(AttributeArg[])=} userAttributes New user attributes.\r\n\t     * @param {(AttributeArg[])=} validationData Application metadata.\r\n\t     * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\r\n\t     * @returns {void}\r\n\t     */\n\t\n\t  }, {\n\t    key: 'signUp',\n\t    value: function signUp(username, password, userAttributes, validationData, callback) {\n\t      var _this = this;\n\t\n\t      this.client.makeUnauthenticatedRequest('signUp', {\n\t        ClientId: this.clientId,\n\t        Username: username,\n\t        Password: password,\n\t        UserAttributes: userAttributes,\n\t        ValidationData: validationData\n\t      }, function (err, data) {\n\t        if (err) {\n\t          return callback(err, null);\n\t        }\n\t\n\t        var cognitoUser = {\n\t          Username: username,\n\t          Pool: _this\n\t        };\n\t\n\t        var returnData = {\n\t          user: new _CognitoUser2.default(cognitoUser),\n\t          userConfirmed: data.UserConfirmed\n\t        };\n\t\n\t        return callback(null, returnData);\n\t      });\n\t    }\n\t\n\t    /**\r\n\t     * method for getting the current user of the application from the local storage\r\n\t     *\r\n\t     * @returns {CognitoUser} the user retrieved from storage\r\n\t     */\n\t\n\t  }, {\n\t    key: 'getCurrentUser',\n\t    value: function getCurrentUser() {\n\t      var lastUserKey = 'CognitoIdentityServiceProvider.' + this.clientId + '.LastAuthUser';\n\t      var storage = window.localStorage;\n\t\n\t      var lastAuthUser = storage.getItem(lastUserKey);\n\t      if (lastAuthUser) {\n\t        var cognitoUser = {\n\t          Username: lastAuthUser,\n\t          Pool: this\n\t        };\n\t\n\t        return new _CognitoUser2.default(cognitoUser);\n\t      }\n\t\n\t      return null;\n\t    }\n\t  }]);\n\t\n\t  return CognitoUserPool;\n\t}();\n\t\n\texports.default = CognitoUserPool;\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _AuthenticationDetails = __webpack_require__(12);\n\t\n\tObject.defineProperty(exports, 'AuthenticationDetails', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_AuthenticationDetails).default;\n\t  }\n\t});\n\t\n\tvar _AuthenticationHelper = __webpack_require__(2);\n\t\n\tObject.defineProperty(exports, 'AuthenticationHelper', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_AuthenticationHelper).default;\n\t  }\n\t});\n\t\n\tvar _CognitoAccessToken = __webpack_require__(3);\n\t\n\tObject.defineProperty(exports, 'CognitoAccessToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoAccessToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoIdToken = __webpack_require__(4);\n\t\n\tObject.defineProperty(exports, 'CognitoIdToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoIdToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoRefreshToken = __webpack_require__(5);\n\t\n\tObject.defineProperty(exports, 'CognitoRefreshToken', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoRefreshToken).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUser = __webpack_require__(6);\n\t\n\tObject.defineProperty(exports, 'CognitoUser', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUser).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserAttribute = __webpack_require__(7);\n\t\n\tObject.defineProperty(exports, 'CognitoUserAttribute', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserAttribute).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserPool = __webpack_require__(13);\n\t\n\tObject.defineProperty(exports, 'CognitoUserPool', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserPool).default;\n\t  }\n\t});\n\t\n\tvar _CognitoUserSession = __webpack_require__(8);\n\t\n\tObject.defineProperty(exports, 'CognitoUserSession', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_CognitoUserSession).default;\n\t  }\n\t});\n\t\n\tvar _DateHelper = __webpack_require__(9);\n\t\n\tObject.defineProperty(exports, 'DateHelper', {\n\t  enumerable: true,\n\t  get: function get() {\n\t    return _interopRequireDefault(_DateHelper).default;\n\t  }\n\t});\n\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/***/ }\n/******/ ])\n});\n;\n\n\n/** WEBPACK FOOTER **\n ** amazon-cognito-identity.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap d48c38d0d09e9a7e3ed5\n **/","import CognitoIdentityServiceProvider from 'aws-sdk/clients/cognitoidentityserviceprovider';\r\nimport * as enhancements from './src';\r\n\r\nexport * from './src';\r\n\r\nObject.keys(enhancements).forEach(key => {\r\n  CognitoIdentityServiceProvider[key] = enhancements[key];\r\n});\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./enhance.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_1__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external \"sjcl\"\n ** module id = 1\n ** module chunks = 0\n **/","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport * as sjcl from 'sjcl';\r\nimport { BigInteger } from 'jsbn';\r\n\r\nconst initN = 'FFFFFFFFFFFFFFFFC90FDAA22168C234C4C6628B80DC1CD1'\r\n  + '29024E088A67CC74020BBEA63B139B22514A08798E3404DD'\r\n  + 'EF9519B3CD3A431B302B0A6DF25F14374FE1356D6D51C245'\r\n  + 'E485B576625E7EC6F44C42E9A637ED6B0BFF5CB6F406B7ED'\r\n  + 'EE386BFB5A899FA5AE9F24117C4B1FE649286651ECE45B3D'\r\n  + 'C2007CB8A163BF0598DA48361C55D39A69163FA8FD24CF5F'\r\n  + '83655D23DCA3AD961C62F356208552BB9ED529077096966D'\r\n  + '670C354E4ABC9804F1746C08CA18217C32905E462E36CE3B'\r\n  + 'E39E772C180E86039B2783A2EC07A28FB5C55DF06F4C52C9'\r\n  + 'DE2BCBF6955817183995497CEA956AE515D2261898FA0510'\r\n  + '15728E5A8AAAC42DAD33170D04507A33A85521ABDF1CBA64'\r\n  + 'ECFB850458DBEF0A8AEA71575D060C7DB3970F85A6E1E4C7'\r\n  + 'ABF5AE8CDB0933D71E8C94E04A25619DCEE3D2261AD2EE6B'\r\n  + 'F12FFA06D98A0864D87602733EC86A64521F2B18177B200C'\r\n  + 'BBE117577A615D6C770988C0BAD946E208E24FA074E5AB31'\r\n  + '43DB5BFCE0FD108E4B82D120A93AD2CAFFFFFFFFFFFFFFFF';\r\n\r\n/** @class */\r\nexport default class AuthenticationHelper {\r\n  /**\r\n   * Constructs a new AuthenticationHelper object\r\n   * @param {string} PoolName Cognito user pool name.\r\n   * @param {int} paranoia Random number generation paranoia level.\r\n   */\r\n  constructor(PoolName, paranoia) {\r\n    this.N = new BigInteger(initN, 16);\r\n    this.g = new BigInteger('2');\r\n    this.k = new BigInteger(this.hexHash(`00${this.N.toString(16)}0${this.g.toString(16)}`), 16);\r\n\r\n    this.paranoia = paranoia;\r\n\r\n    this.smallAValue = this.generateRandomSmallA();\r\n    this.largeAValue = this.calculateA(this.smallAValue);\r\n\r\n    this.infoBits = sjcl.codec.utf8String.toBits('Caldera Derived Key');\r\n\r\n    this.poolName = PoolName;\r\n  }\r\n\r\n  /**\r\n   * @returns {BigInteger} small A, a random number\r\n   */\r\n  getSmallAValue() {\r\n    return this.smallAValue;\r\n  }\r\n\r\n  /**\r\n   * @returns {BigInteger} large A, a value generated from small A\r\n   */\r\n  getLargeAValue() {\r\n    return this.largeAValue;\r\n  }\r\n\r\n  /**\r\n   * helper function to generate a random big integer\r\n   * @returns {BigInteger} a random value.\r\n   * @private\r\n   */\r\n  generateRandomSmallA() {\r\n    const words = sjcl.random.randomWords(32, this.paranoia);\r\n    const hexRandom = sjcl.codec.hex.fromBits(words);\r\n\r\n    const randomBigInt = new BigInteger(hexRandom, 16);\r\n    const smallABigInt = randomBigInt.mod(this.N);\r\n\r\n    return smallABigInt;\r\n  }\r\n\r\n  /**\r\n   * helper function to generate a random string\r\n   * @returns {string} a random value.\r\n   * @private\r\n   */\r\n  generateRandomString() {\r\n    const words = sjcl.random.randomWords(10, this.paranoia);\r\n    const stringRandom = sjcl.codec.base64.fromBits(words);\r\n\r\n    return stringRandom;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} Generated random value included in password hash.\r\n   */\r\n  getRandomPassword() {\r\n    return this.randomPassword;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} Generated random value included in devices hash.\r\n   */\r\n  getSaltDevices() {\r\n    return this.SaltToHashDevices;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} Value used to verify devices.\r\n   */\r\n  getVerifierDevices() {\r\n    return this.verifierDevices;\r\n  }\r\n\r\n  /**\r\n   * Generate salts and compute verifier.\r\n   * @param {string} deviceGroupKey Devices to generate verifier for.\r\n   * @param {string} username User to generate verifier for.\r\n   * @returns {void}\r\n   */\r\n  generateHashDevice(deviceGroupKey, username) {\r\n    this.randomPassword = this.generateRandomString();\r\n    const combinedString = `${deviceGroupKey}${username}:${this.randomPassword}`;\r\n    const hashedString = this.hash(combinedString);\r\n\r\n    const words = sjcl.random.randomWords(4, this.paranoia);\r\n    const hexRandom = sjcl.codec.hex.fromBits(words);\r\n    const saltDevices = new BigInteger(hexRandom, 16);\r\n    const firstCharSalt = saltDevices.toString(16)[0];\r\n    this.SaltToHashDevices = saltDevices.toString(16);\r\n\r\n    if (saltDevices.toString(16).length % 2 === 1) {\r\n      this.SaltToHashDevices = `0${this.SaltToHashDevices}`;\r\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharSalt) !== -1) {\r\n      this.SaltToHashDevices = `00${this.SaltToHashDevices}`;\r\n    }\r\n    const verifierDevicesNotPadded = this.g.modPow(\r\n      new BigInteger(this.hexHash(this.SaltToHashDevices + hashedString), 16),\r\n      this.N);\r\n\r\n    const firstCharVerifierDevices = verifierDevicesNotPadded.toString(16)[0];\r\n    this.verifierDevices = verifierDevicesNotPadded.toString(16);\r\n\r\n    if (verifierDevicesNotPadded.toString(16).length % 2 === 1) {\r\n      this.verifierDevices = `0${this.verifierDevices}`;\r\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharVerifierDevices) !== -1) {\r\n      this.verifierDevices = `00${this.verifierDevices}`;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the client's public value A = g^a%N\r\n   * with the generated random number a\r\n   * @param {BigInteger} a Randomly generated small A.\r\n   * @returns {BigInteger} Computed large A.\r\n   * @private\r\n   */\r\n  calculateA(a) {\r\n    const A = this.g.modPow(a, this.N);\r\n\r\n    if (A.mod(this.N).toString() === '0') {\r\n      throw new Error('Illegal paramater. A mod N cannot be 0.');\r\n    }\r\n    return A;\r\n  }\r\n\r\n  /**\r\n   * Calculate the client's value U which is the hash of A and B\r\n   * @param {BigInteger} A Large A value.\r\n   * @param {BigInteger} B Server B value.\r\n   * @returns {BigInteger} Computed U value.\r\n   * @private\r\n   */\r\n  calculateU(A, B) {\r\n    const firstCharA = A.toString(16)[0];\r\n    const firstCharB = B.toString(16)[0];\r\n    let AToHash = A.toString(16);\r\n    let BToHash = B.toString(16);\r\n\r\n    if (A.toString(16).length % 2 === 1) {\r\n      AToHash = `0${AToHash}`;\r\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharA) !== -1) {\r\n      AToHash = `00${AToHash}`;\r\n    }\r\n\r\n    if (B.toString(16).length % 2 === 1) {\r\n      BToHash = `0${BToHash}`;\r\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharB) !== -1) {\r\n      BToHash = `00${BToHash}`;\r\n    }\r\n\r\n    this.UHexHash = this.hexHash(AToHash + BToHash);\r\n    const finalU = new BigInteger(this.UHexHash, 16);\r\n\r\n    return finalU;\r\n  }\r\n\r\n  /**\r\n   * Calculate a hash from a bitArray\r\n   * @param {sjcl.bitArray} bitArray Value to hash.\r\n   * @returns {String} Hex-encoded hash.\r\n   * @private\r\n   */\r\n  hash(bitArray) {\r\n    const hashHex = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(bitArray));\r\n    return (new Array(64 - hashHex.length).join('0')) + hashHex;\r\n  }\r\n\r\n  /**\r\n   * Calculate a hash from a hex string\r\n   * @param {String} hexStr Value to hash.\r\n   * @returns {String} Hex-encoded hash.\r\n   * @private\r\n   */\r\n  hexHash(hexStr) {\r\n    const hashHex = sjcl.codec.hex.fromBits(sjcl.hash.sha256.hash(sjcl.codec.hex.toBits(hexStr)));\r\n    return (new Array(64 - hashHex.length).join('0')) + hashHex;\r\n  }\r\n\r\n  /**\r\n   * Standard hkdf algorithm\r\n   * @param {sjcl.bitArray} ikm Input key material.\r\n   * @param {sjcl.bitArray} salt Salt value.\r\n   * @returns {sjcl.bitArray} Strong key material.\r\n   * @private\r\n   */\r\n  computehkdf(ikm, salt) {\r\n    const mac = new sjcl.misc.hmac(salt, sjcl.hash.sha256);\r\n    mac.update(ikm);\r\n    const prk = mac.digest();\r\n    const hmac = new sjcl.misc.hmac(prk, sjcl.hash.sha256);\r\n    const infoBitsUpdate = sjcl.bitArray.concat(\r\n      this.infoBits,\r\n      sjcl.codec.utf8String.toBits(String.fromCharCode(1)));\r\n    hmac.update(infoBitsUpdate);\r\n\r\n    return sjcl.bitArray.clamp(hmac.digest(), 128);\r\n  }\r\n\r\n  /**\r\n   * Calculates the final hkdf based on computed S value, and computed U value and the key\r\n   * @param {String} username Username.\r\n   * @param {String} password Password.\r\n   * @param {BigInteger} serverBValue Server B value.\r\n   * @param {BigInteger} salt Generated salt.\r\n   * @returns {sjcl.bitArray} Computed HKDF value.\r\n   */\r\n  getPasswordAuthenticationKey(username, password, serverBValue, salt) {\r\n    if (serverBValue.mod(this.N).equals(new BigInteger('0', 16))) {\r\n      throw new Error('B cannot be zero.');\r\n    }\r\n\r\n    this.UValue = this.calculateU(this.largeAValue, serverBValue);\r\n\r\n    if (this.UValue.equals(new BigInteger('0', 16))) {\r\n      throw new Error('U cannot be zero.');\r\n    }\r\n\r\n    const usernamePassword = `${this.poolName}${username}:${password}`;\r\n    const usernamePasswordHash = this.hash(usernamePassword);\r\n\r\n    const firstCharSalt = salt.toString(16)[0];\r\n    let SaltToHash = salt.toString(16);\r\n\r\n    if (salt.toString(16).length % 2 === 1) {\r\n      SaltToHash = `0${SaltToHash}`;\r\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharSalt) !== -1) {\r\n      SaltToHash = `00${SaltToHash}`;\r\n    }\r\n\r\n    const xValue = new BigInteger(this.hexHash(SaltToHash + usernamePasswordHash), 16);\r\n\r\n    const gModPowXN = this.g.modPow(xValue, this.N);\r\n    const intValue2 = serverBValue.subtract(this.k.multiply(gModPowXN));\r\n    const sValue = intValue2.modPow(\r\n      this.smallAValue.add(this.UValue.multiply(xValue)),\r\n      this.N\r\n    ).mod(this.N);\r\n\r\n    let SToHash = sValue.toString(16);\r\n    const firstCharS = sValue.toString(16)[0];\r\n\r\n    if (sValue.toString(16).length % 2 === 1) {\r\n      SToHash = `0${SToHash}`;\r\n    } else if ('89ABCDEFabcdef'.indexOf(firstCharS) !== -1) {\r\n      SToHash = `00${SToHash}`;\r\n    }\r\n\r\n    let UValueToHash = this.UHexHash;\r\n    const firstCharU = this.UHexHash[0];\r\n\r\n    if (this.UHexHash.length % 2 === 1) {\r\n      UValueToHash = `0${UValueToHash}`;\r\n    } else if (this.UHexHash.length % 2 === 0 && '89ABCDEFabcdef'.indexOf(firstCharU) !== -1) {\r\n      UValueToHash = `00${UValueToHash}`;\r\n    }\r\n\r\n    const hkdf = this.computehkdf(\r\n      sjcl.codec.hex.toBits(SToHash),\r\n      sjcl.codec.hex.toBits(UValueToHash));\r\n\r\n    return hkdf;\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/AuthenticationHelper.js\n **/","/*\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport * as sjcl from 'sjcl';\r\n\r\n/** @class */\r\nexport default class CognitoAccessToken {\r\n  /**\r\n   * Constructs a new CognitoAccessToken object\r\n   * @param {string=} AccessToken The JWT access token.\r\n   */\r\n  constructor({ AccessToken } = {}) {\r\n    // Assign object\r\n    this.jwtToken = AccessToken || '';\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the record's token.\r\n   */\r\n  getJwtToken() {\r\n    return this.jwtToken;\r\n  }\r\n\r\n  /**\r\n   * @returns {int} the token's expiration (exp member).\r\n   */\r\n  getExpiration() {\r\n    const payload = this.jwtToken.split('.')[1];\r\n    const expiration = JSON.parse(\r\n      sjcl.codec.utf8String.fromBits(sjcl.codec.base64url.toBits(payload)));\r\n    return expiration.exp;\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/CognitoAccessToken.js\n **/","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport * as sjcl from 'sjcl';\r\n\r\n/** @class */\r\nexport default class CognitoIdToken {\r\n  /**\r\n   * Constructs a new CognitoIdToken object\r\n   * @param {string=} IdToken The JWT Id token\r\n   */\r\n  constructor({ IdToken } = {}) {\r\n    // Assign object\r\n    this.jwtToken = IdToken || '';\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the record's token.\r\n   */\r\n  getJwtToken() {\r\n    return this.jwtToken;\r\n  }\r\n\r\n  /**\r\n   * @returns {int} the token's expiration (exp member).\r\n   */\r\n  getExpiration() {\r\n    const payload = this.jwtToken.split('.')[1];\r\n    const expiration = JSON.parse(\r\n      sjcl.codec.utf8String.fromBits(sjcl.codec.base64url.toBits(payload)));\r\n    return expiration.exp;\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/CognitoIdToken.js\n **/","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/** @class */\r\nexport default class CognitoRefreshToken {\r\n  /**\r\n   * Constructs a new CognitoRefreshToken object\r\n   * @param {string=} RefreshToken The JWT refresh token.\r\n   */\r\n  constructor({ RefreshToken } = {}) {\r\n    // Assign object\r\n    this.token = RefreshToken || '';\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the record's token.\r\n   */\r\n  getToken() {\r\n    return this.token;\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/CognitoRefreshToken.js\n **/","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport * as sjcl from 'sjcl';\r\nimport { BigInteger } from 'jsbn';\r\n\r\nimport AuthenticationHelper from './AuthenticationHelper';\r\nimport CognitoAccessToken from './CognitoAccessToken';\r\nimport CognitoIdToken from './CognitoIdToken';\r\nimport CognitoRefreshToken from './CognitoRefreshToken';\r\nimport CognitoUserSession from './CognitoUserSession';\r\nimport DateHelper from './DateHelper';\r\nimport CognitoUserAttribute from './CognitoUserAttribute';\r\n\r\n/**\r\n * @callback nodeCallback\r\n * @template T result\r\n * @param {*} err The operation failure reason, or null.\r\n * @param {T} result The operation result.\r\n */\r\n\r\n/**\r\n * @callback onFailure\r\n * @param {*} err Failure reason.\r\n */\r\n\r\n/**\r\n * @callback onSuccess\r\n * @template T result\r\n * @param {T} result The operation result.\r\n */\r\n\r\n/**\r\n * @callback mfaRequired\r\n * @param {*} details MFA challenge details.\r\n */\r\n\r\n/**\r\n * @callback customChallenge\r\n * @param {*} details Custom challenge details.\r\n */\r\n\r\n/**\r\n * @callback inputVerificationCode\r\n * @param {*} data Server response.\r\n */\r\n\r\n/**\r\n * @callback authSuccess\r\n * @param {CognitoUserSession} session The new session.\r\n * @param {bool=} userConfirmationNecessary User must be confirmed.\r\n */\r\n\r\n\r\n/** @class */\r\nexport default class CognitoUser {\r\n  /**\r\n   * Constructs a new CognitoUser object\r\n   * @param {object} data Creation options\r\n   * @param {string} data.Username The user's username.\r\n   * @param {CognitoUserPool} data.Pool Pool containing the user.\r\n   */\r\n  constructor(data) {\r\n    if (data == null || data.Username == null || data.Pool == null) {\r\n      throw new Error('Username and pool information are required.');\r\n    }\r\n\r\n    this.username = data.Username || '';\r\n    this.pool = data.Pool;\r\n    this.Session = null;\r\n\r\n    this.client = data.Pool.client;\r\n\r\n    this.signInUserSession = null;\r\n    this.authenticationFlowType = 'USER_SRP_AUTH';\r\n  }\r\n\r\n  /**\r\n   * @returns {CognitoUserSession} the current session for this user\r\n   */\r\n  getSignInUserSession() {\r\n    return this.signInUserSession;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the user's username\r\n   */\r\n  getUsername() {\r\n    return this.username;\r\n  }\r\n\r\n  /**\r\n   * @returns {String} the authentication flow type\r\n   */\r\n  getAuthenticationFlowType() {\r\n    return this.authenticationFlowType;\r\n  }\r\n\r\n  /**\r\n   * sets authentication flow type\r\n   * @param {string} authenticationFlowType New value.\r\n   * @returns {void}\r\n   */\r\n  setAuthenticationFlowType(authenticationFlowType) {\r\n    this.authenticationFlowType = authenticationFlowType;\r\n  }\r\n\r\n  /**\r\n   * This is used for authenticating the user. it calls the AuthenticationHelper for SRP related\r\n   * stuff\r\n   * @param {AuthenticationDetails} authDetails Contains the authentication data\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {mfaRequired} callback.mfaRequired MFA code required to continue.\r\n   * @param {customChallenge} callback.customChallenge\r\n   *    Custom challenge response required to continue.\r\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n   * @returns {void}\r\n   */\r\n  authenticateUser(authDetails, callback) {\r\n    const authenticationHelper = new AuthenticationHelper(\r\n      this.pool.getUserPoolId().split('_')[1],\r\n      this.pool.getParanoia());\r\n    const dateHelper = new DateHelper();\r\n\r\n    let serverBValue;\r\n    let salt;\r\n    const authParameters = {};\r\n\r\n    if (this.deviceKey != null) {\r\n      authParameters.DEVICE_KEY = this.deviceKey;\r\n    }\r\n\r\n    authParameters.USERNAME = this.username;\r\n    authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\r\n\r\n    if (this.authenticationFlowType === 'CUSTOM_AUTH') {\r\n      authParameters.CHALLENGE_NAME = 'SRP_A';\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('initiateAuth', {\r\n      AuthFlow: this.authenticationFlowType,\r\n      ClientId: this.pool.getClientId(),\r\n      AuthParameters: authParameters,\r\n      ClientMetadata: authDetails.getValidationData(),\r\n    }, (err, data) => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n\r\n      const challengeParameters = data.ChallengeParameters;\r\n\r\n      this.username = challengeParameters.USER_ID_FOR_SRP;\r\n      serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\r\n      salt = new BigInteger(challengeParameters.SALT, 16);\r\n      this.getCachedDeviceKeyAndPassword();\r\n\r\n      const hkdf = authenticationHelper.getPasswordAuthenticationKey(\r\n        this.username,\r\n        authDetails.getPassword(),\r\n        serverBValue,\r\n        salt);\r\n      const secretBlockBits = sjcl.codec.base64.toBits(challengeParameters.SECRET_BLOCK);\r\n\r\n      const mac = new sjcl.misc.hmac(hkdf, sjcl.hash.sha256);\r\n      mac.update(sjcl.codec.utf8String.toBits(this.pool.getUserPoolId().split('_')[1]));\r\n      mac.update(sjcl.codec.utf8String.toBits(this.username));\r\n      mac.update(secretBlockBits);\r\n      const dateNow = dateHelper.getNowString();\r\n      mac.update(sjcl.codec.utf8String.toBits(dateNow));\r\n      const signature = mac.digest();\r\n      const signatureString = sjcl.codec.base64.fromBits(signature);\r\n\r\n      const challengeResponses = {};\r\n\r\n      challengeResponses.USERNAME = this.username;\r\n      challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\r\n      challengeResponses.TIMESTAMP = dateNow;\r\n      challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\r\n\r\n      if (this.deviceKey != null) {\r\n        challengeResponses.DEVICE_KEY = this.deviceKey;\r\n      }\r\n\r\n      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\r\n        ChallengeName: 'PASSWORD_VERIFIER',\r\n        ClientId: this.pool.getClientId(),\r\n        ChallengeResponses: challengeResponses,\r\n        Session: data.Session,\r\n      }, (errAuthenticate, dataAuthenticate) => {\r\n        if (errAuthenticate) {\r\n          return callback.onFailure(errAuthenticate);\r\n        }\r\n\r\n        const challengeName = dataAuthenticate.ChallengeName;\r\n        if (challengeName === 'SMS_MFA') {\r\n          this.Session = dataAuthenticate.Session;\r\n          return callback.mfaRequired(challengeName);\r\n        }\r\n\r\n        if (challengeName === 'CUSTOM_CHALLENGE') {\r\n          this.Session = dataAuthenticate.Session;\r\n          return callback.customChallenge(dataAuthenticate.ChallengeParameters);\r\n        }\r\n\r\n        if (challengeName === 'DEVICE_SRP_AUTH') {\r\n          this.getDeviceResponse(callback);\r\n          return undefined;\r\n        }\r\n\r\n        this.signInUserSession = this.getCognitoUserSession(\r\n          dataAuthenticate.AuthenticationResult);\r\n        this.cacheTokens();\r\n\r\n        const newDeviceMetadata = dataAuthenticate.AuthenticationResult.NewDeviceMetadata;\r\n        if (newDeviceMetadata == null) {\r\n          return callback.onSuccess(this.signInUserSession);\r\n        }\r\n\r\n        authenticationHelper.generateHashDevice(\r\n           dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,\r\n           dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\r\n\r\n        const deviceSecretVerifierConfig = {\r\n          Salt: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(\r\n            authenticationHelper.getSaltDevices().toString(16))),\r\n          PasswordVerifier: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(\r\n            authenticationHelper.getVerifierDevices().toString(16))),\r\n        };\r\n\r\n        this.verifierDevices = sjcl.codec.base64.fromBits(\r\n          authenticationHelper.getVerifierDevices());\r\n        this.deviceGroupKey = newDeviceMetadata.DeviceGroupKey;\r\n        this.randomPassword = authenticationHelper.getRandomPassword();\r\n\r\n        this.client.makeUnauthenticatedRequest('confirmDevice', {\r\n          DeviceKey: newDeviceMetadata.DeviceKey,\r\n          AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n          DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\r\n          DeviceName: navigator.userAgent,\r\n        }, (errConfirm, dataConfirm) => {\r\n          if (errConfirm) {\r\n            return callback.onFailure(errConfirm);\r\n          }\r\n          this.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\r\n          this.cacheDeviceKeyAndPassword();\r\n          if (dataConfirm.UserConfirmationNecessary === true) {\r\n            return callback.onSuccess(\r\n              this.signInUserSession,\r\n              dataConfirm.UserConfirmationNecessary);\r\n          }\r\n          return callback.onSuccess(this.signInUserSession);\r\n        });\r\n        return undefined;\r\n      });\r\n      return undefined;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used to get a session using device authentication. It is called at the end of user\r\n   * authentication\r\n   *\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n   * @returns {void}\r\n   * @private\r\n   */\r\n  getDeviceResponse(callback) {\r\n    const authenticationHelper = new AuthenticationHelper(\r\n      this.deviceGroupKey,\r\n      this.pool.getParanoia());\r\n    const dateHelper = new DateHelper();\r\n\r\n    const authParameters = {};\r\n\r\n    authParameters.USERNAME = this.username;\r\n    authParameters.DEVICE_KEY = this.deviceKey;\r\n    authParameters.SRP_A = authenticationHelper.getLargeAValue().toString(16);\r\n\r\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\r\n      ChallengeName: 'DEVICE_SRP_AUTH',\r\n      ClientId: this.pool.getClientId(),\r\n      ChallengeResponses: authParameters,\r\n    }, (err, data) => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n\r\n      const challengeParameters = data.ChallengeParameters;\r\n\r\n      const serverBValue = new BigInteger(challengeParameters.SRP_B, 16);\r\n      const salt = new BigInteger(challengeParameters.SALT, 16);\r\n\r\n      const hkdf = authenticationHelper.getPasswordAuthenticationKey(\r\n        this.deviceKey,\r\n        this.randomPassword,\r\n        serverBValue,\r\n        salt);\r\n      const secretBlockBits = sjcl.codec.base64.toBits(challengeParameters.SECRET_BLOCK);\r\n\r\n      const mac = new sjcl.misc.hmac(hkdf, sjcl.hash.sha256);\r\n      mac.update(sjcl.codec.utf8String.toBits(this.deviceGroupKey));\r\n      mac.update(sjcl.codec.utf8String.toBits(this.deviceKey));\r\n      mac.update(secretBlockBits);\r\n      const dateNow = dateHelper.getNowString();\r\n      mac.update(sjcl.codec.utf8String.toBits(dateNow));\r\n      const signature = mac.digest();\r\n      const signatureString = sjcl.codec.base64.fromBits(signature);\r\n\r\n      const challengeResponses = {};\r\n\r\n      challengeResponses.USERNAME = this.username;\r\n      challengeResponses.PASSWORD_CLAIM_SECRET_BLOCK = challengeParameters.SECRET_BLOCK;\r\n      challengeResponses.TIMESTAMP = dateNow;\r\n      challengeResponses.PASSWORD_CLAIM_SIGNATURE = signatureString;\r\n      challengeResponses.DEVICE_KEY = this.deviceKey;\r\n\r\n      this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\r\n        ChallengeName: 'DEVICE_PASSWORD_VERIFIER',\r\n        ClientId: this.pool.getClientId(),\r\n        ChallengeResponses: challengeResponses,\r\n        Session: data.Session,\r\n      }, (errAuthenticate, dataAuthenticate) => {\r\n        if (errAuthenticate) {\r\n          return callback.onFailure(errAuthenticate);\r\n        }\r\n\r\n        this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\r\n        this.cacheTokens();\r\n\r\n        return callback.onSuccess(this.signInUserSession);\r\n      });\r\n      return undefined;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used for a certain user to confirm the registration by using a confirmation code\r\n   * @param {string} confirmationCode Code entered by user.\r\n   * @param {bool} forceAliasCreation Allow migrating from an existing email / phone number.\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  confirmRegistration(confirmationCode, forceAliasCreation, callback) {\r\n    this.client.makeUnauthenticatedRequest('confirmSignUp', {\r\n      ClientId: this.pool.getClientId(),\r\n      ConfirmationCode: confirmationCode,\r\n      Username: this.username,\r\n      ForceAliasCreation: forceAliasCreation,\r\n    }, err => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      return callback(null, 'SUCCESS');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used by the user once he has the responses to a custom challenge\r\n   * @param {string} answerChallenge The custom challange answer.\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {customChallenge} callback.customChallenge\r\n   *    Custom challenge response required to continue.\r\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n   * @returns {void}\r\n   */\r\n  sendCustomChallengeAnswer(answerChallenge, callback) {\r\n    const challengeResponses = {};\r\n    challengeResponses.USERNAME = this.username;\r\n    challengeResponses.ANSWER = answerChallenge;\r\n\r\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\r\n      ChallengeName: 'CUSTOM_CHALLENGE',\r\n      ChallengeResponses: challengeResponses,\r\n      ClientId: this.pool.getClientId(),\r\n      Session: this.Session,\r\n    }, (err, data) => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n\r\n      const challengeName = data.ChallengeName;\r\n\r\n      if (challengeName === 'CUSTOM_CHALLENGE') {\r\n        this.Session = data.Session;\r\n        return callback.customChallenge(data.challengeParameters);\r\n      }\r\n\r\n      this.signInUserSession = this.getCognitoUserSession(data.AuthenticationResult);\r\n      this.cacheTokens();\r\n      return callback.onSuccess(this.signInUserSession);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used by the user once he has an MFA code\r\n   * @param {string} confirmationCode The MFA code entered by the user.\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {authSuccess} callback.onSuccess Called on success with the new session.\r\n   * @returns {void}\r\n   */\r\n  sendMFACode(confirmationCode, callback) {\r\n    const challengeResponses = {};\r\n    challengeResponses.USERNAME = this.username;\r\n    challengeResponses.SMS_MFA_CODE = confirmationCode;\r\n\r\n    if (this.deviceKey != null) {\r\n      challengeResponses.DEVICE_KEY = this.deviceKey;\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('respondToAuthChallenge', {\r\n      ChallengeName: 'SMS_MFA',\r\n      ChallengeResponses: challengeResponses,\r\n      ClientId: this.pool.getClientId(),\r\n      Session: this.Session,\r\n    }, (err, dataAuthenticate) => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n\r\n      this.signInUserSession = this.getCognitoUserSession(dataAuthenticate.AuthenticationResult);\r\n      this.cacheTokens();\r\n\r\n      if (dataAuthenticate.AuthenticationResult.NewDeviceMetadata == null) {\r\n        return callback.onSuccess(this.signInUserSession);\r\n      }\r\n\r\n      const authenticationHelper = new AuthenticationHelper(\r\n        this.pool.getUserPoolId().split('_')[1],\r\n        this.pool.getParanoia());\r\n      authenticationHelper.generateHashDevice(\r\n        dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceGroupKey,\r\n        dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey);\r\n\r\n      const deviceSecretVerifierConfig = {\r\n        Salt: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(\r\n          authenticationHelper.getSaltDevices().toString(16))),\r\n        PasswordVerifier: sjcl.codec.base64.fromBits(sjcl.codec.hex.toBits(\r\n          authenticationHelper.getVerifierDevices().toString(16))),\r\n      };\r\n\r\n      this.verifierDevices = sjcl.codec.base64.fromBits(\r\n        authenticationHelper.getVerifierDevices());\r\n      this.deviceGroupKey = dataAuthenticate.AuthenticationResult\r\n        .NewDeviceMetadata.DeviceGroupKey;\r\n      this.randomPassword = authenticationHelper.getRandomPassword();\r\n\r\n      this.client.makeUnauthenticatedRequest('confirmDevice', {\r\n        DeviceKey: dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey,\r\n        AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n        DeviceSecretVerifierConfig: deviceSecretVerifierConfig,\r\n        DeviceName: navigator.userAgent,\r\n      }, (errConfirm, dataConfirm) => {\r\n        if (errConfirm) {\r\n          return callback.onFailure(errConfirm);\r\n        }\r\n\r\n        this.deviceKey = dataAuthenticate.AuthenticationResult.NewDeviceMetadata.DeviceKey;\r\n        this.cacheDeviceKeyAndPassword();\r\n        if (dataConfirm.UserConfirmationNecessary === true) {\r\n          return callback.onSuccess(\r\n            this.signInUserSession,\r\n            dataConfirm.UserConfirmationNecessary);\r\n        }\r\n        return callback.onSuccess(this.signInUserSession);\r\n      });\r\n      return undefined;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used by an authenticated user to change the current password\r\n   * @param {string} oldUserPassword The current password.\r\n   * @param {string} newUserPassword The requested new password.\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  changePassword(oldUserPassword, newUserPassword, callback) {\r\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('changePassword', {\r\n      PreviousPassword: oldUserPassword,\r\n      ProposedPassword: newUserPassword,\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, err => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      return callback(null, 'SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used by an authenticated user to enable MFA for himself\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  enableMFA(callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    const mfaOptions = [];\r\n    const mfaEnabled = {\r\n      DeliveryMedium: 'SMS',\r\n      AttributeName: 'phone_number',\r\n    };\r\n    mfaOptions.push(mfaEnabled);\r\n\r\n    this.client.makeUnauthenticatedRequest('setUserSettings', {\r\n      MFAOptions: mfaOptions,\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, err => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      return callback(null, 'SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used by an authenticated user to disable MFA for himself\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  disableMFA(callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    const mfaOptions = [];\r\n\r\n    this.client.makeUnauthenticatedRequest('setUserSettings', {\r\n      MFAOptions: mfaOptions,\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, err => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      return callback(null, 'SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n\r\n  /**\r\n   * This is used by an authenticated user to delete himself\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  deleteUser(callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('deleteUser', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, err => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      return callback(null, 'SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * @typedef {CognitoUserAttribute | { Name:string, Value:string }} AttributeArg\r\n   */\r\n  /**\r\n   * This is used by an authenticated user to change a list of attributes\r\n   * @param {AttributeArg[]} attributes A list of the new user attributes.\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  updateAttributes(attributes, callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('updateUserAttributes', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n      UserAttributes: attributes,\r\n    }, err => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      return callback(null, 'SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used by an authenticated user to get a list of attributes\r\n   * @param {nodeCallback<CognitoUserAttribute[]>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  getUserAttributes(callback) {\r\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('getUser', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, (err, userData) => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n\r\n      const attributeList = [];\r\n\r\n      for (let i = 0; i < userData.UserAttributes.length; i++) {\r\n        const attribute = {\r\n          Name: userData.UserAttributes[i].Name,\r\n          Value: userData.UserAttributes[i].Value,\r\n        };\r\n        const userAttribute = new CognitoUserAttribute(attribute);\r\n        attributeList.push(userAttribute);\r\n      }\r\n\r\n      return callback(null, attributeList);\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used by an authenticated user to delete a list of attributes\r\n   * @param {string[]} attributeList Names of the attributes to delete.\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  deleteAttributes(attributeList, callback) {\r\n    if (!(this.signInUserSession != null && this.signInUserSession.isValid())) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('deleteUserAttributes', {\r\n      UserAttributeNames: attributeList,\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, err => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      return callback(null, 'SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used by a user to resend a confirmation code\r\n   * @param {nodeCallback<string>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  resendConfirmationCode(callback) {\r\n    this.client.makeUnauthenticatedRequest('resendConfirmationCode', {\r\n      ClientId: this.pool.getClientId(),\r\n      Username: this.username,\r\n    }, err => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      return callback(null, 'SUCCESS');\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used to get a session, either from the session object\r\n   * or from  the local storage, or by using a refresh token\r\n   *\r\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  getSession(callback) {\r\n    if (this.username == null) {\r\n      return callback(new Error('Username is null. Cannot retrieve a new session'), null);\r\n    }\r\n\r\n    if (this.signInUserSession != null && this.signInUserSession.isValid()) {\r\n      return callback(null, this.signInUserSession);\r\n    }\r\n\r\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\r\n    const idTokenKey = `${keyPrefix}.idToken`;\r\n    const accessTokenKey = `${keyPrefix}.accessToken`;\r\n    const refreshTokenKey = `${keyPrefix}.refreshToken`;\r\n\r\n    const storage = window.localStorage;\r\n\r\n    if (storage.getItem(idTokenKey)) {\r\n      const idToken = new CognitoIdToken({\r\n        IdToken: storage.getItem(idTokenKey),\r\n      });\r\n      const accessToken = new CognitoAccessToken({\r\n        AccessToken: storage.getItem(accessTokenKey),\r\n      });\r\n      const refreshToken = new CognitoRefreshToken({\r\n        RefreshToken: storage.getItem(refreshTokenKey),\r\n      });\r\n\r\n      const sessionData = {\r\n        IdToken: idToken,\r\n        AccessToken: accessToken,\r\n        RefreshToken: refreshToken,\r\n      };\r\n      const cachedSession = new CognitoUserSession(sessionData);\r\n      if (cachedSession.isValid()) {\r\n        this.signInUserSession = cachedSession;\r\n        return callback(null, this.signInUserSession);\r\n      }\r\n\r\n      if (refreshToken.getToken() == null) {\r\n        return callback(new Error('Cannot retrieve a new session. Please authenticate.'), null);\r\n      }\r\n\r\n      this.refreshSession(refreshToken, callback);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n\r\n  /**\r\n   * This uses the refreshToken to retrieve a new session\r\n   * @param {CognitoRefreshToken} refreshToken A previous session's refresh token.\r\n   * @param {nodeCallback<CognitoUserSession>} callback Called on success or error.\r\n   * @returns {void}\r\n   */\r\n  refreshSession(refreshToken, callback) {\r\n    const authParameters = {};\r\n    authParameters.REFRESH_TOKEN = refreshToken.getToken();\r\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\r\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\r\n    const storage = window.localStorage;\r\n\r\n    if (storage.getItem(lastUserKey)) {\r\n      this.username = storage.getItem(lastUserKey);\r\n      const deviceKeyKey = `${keyPrefix}.${this.username}.deviceKey`;\r\n      this.deviceKey = storage.getItem(deviceKeyKey);\r\n      authParameters.DEVICE_KEY = this.deviceKey;\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('initiateAuth', {\r\n      ClientId: this.pool.getClientId(),\r\n      AuthFlow: 'REFRESH_TOKEN_AUTH',\r\n      AuthParameters: authParameters,\r\n    }, (err, authResult) => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n      if (authResult) {\r\n        const authenticationResult = authResult.AuthenticationResult;\r\n        if (!Object.prototype.hasOwnProperty.call(authenticationResult, 'RefreshToken')) {\r\n          authenticationResult.RefreshToken = refreshToken.getToken();\r\n        }\r\n        this.signInUserSession = this.getCognitoUserSession(authenticationResult);\r\n        this.cacheTokens();\r\n        return callback(null, this.signInUserSession);\r\n      }\r\n      return undefined;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used to save the session tokens to local storage\r\n   * @returns {void}\r\n   */\r\n  cacheTokens() {\r\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\r\n    const idTokenKey = `${keyPrefix}.${this.username}.idToken`;\r\n    const accessTokenKey = `${keyPrefix}.${this.username}.accessToken`;\r\n    const refreshTokenKey = `${keyPrefix}.${this.username}.refreshToken`;\r\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\r\n\r\n    const storage = window.localStorage;\r\n\r\n    storage.setItem(idTokenKey, this.signInUserSession.getIdToken().getJwtToken());\r\n    storage.setItem(accessTokenKey, this.signInUserSession.getAccessToken().getJwtToken());\r\n    storage.setItem(refreshTokenKey, this.signInUserSession.getRefreshToken().getToken());\r\n    storage.setItem(lastUserKey, this.username);\r\n  }\r\n\r\n  /**\r\n   * This is used to cache the device key and device group and device password\r\n   * @returns {void}\r\n   */\r\n  cacheDeviceKeyAndPassword() {\r\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\r\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\r\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\r\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\r\n\r\n    const storage = window.localStorage;\r\n\r\n    storage.setItem(deviceKeyKey, this.deviceKey);\r\n    storage.setItem(randomPasswordKey, this.randomPassword);\r\n    storage.setItem(deviceGroupKeyKey, this.deviceGroupKey);\r\n  }\r\n\r\n  /**\r\n   * This is used to get current device key and device group and device password\r\n   * @returns {void}\r\n   */\r\n  getCachedDeviceKeyAndPassword() {\r\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\r\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\r\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\r\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\r\n\r\n    const storage = window.localStorage;\r\n\r\n    if (storage.getItem(deviceKeyKey)) {\r\n      this.deviceKey = storage.getItem(deviceKeyKey);\r\n      this.randomPassword = storage.getItem(randomPasswordKey);\r\n      this.deviceGroupKey = storage.getItem(deviceGroupKeyKey);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * This is used to clear the device key info from local storage\r\n   * @returns {void}\r\n   */\r\n  clearCachedDeviceKeyAndPassword() {\r\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}.${this.username}`;\r\n    const deviceKeyKey = `${keyPrefix}.deviceKey`;\r\n    const randomPasswordKey = `${keyPrefix}.randomPasswordKey`;\r\n    const deviceGroupKeyKey = `${keyPrefix}.deviceGroupKey`;\r\n\r\n    const storage = window.localStorage;\r\n\r\n    storage.removeItem(deviceKeyKey);\r\n    storage.removeItem(randomPasswordKey);\r\n    storage.removeItem(deviceGroupKeyKey);\r\n  }\r\n\r\n  /**\r\n   * This is used to clear the session tokens from local storage\r\n   * @returns {void}\r\n   */\r\n  clearCachedTokens() {\r\n    const keyPrefix = `CognitoIdentityServiceProvider.${this.pool.getClientId()}`;\r\n    const idTokenKey = `${keyPrefix}.${this.username}.idToken`;\r\n    const accessTokenKey = `${keyPrefix}.${this.username}.accessToken`;\r\n    const refreshTokenKey = `${keyPrefix}.${this.username}.refreshToken`;\r\n    const lastUserKey = `${keyPrefix}.LastAuthUser`;\r\n\r\n    const storage = window.localStorage;\r\n\r\n    storage.removeItem(idTokenKey);\r\n    storage.removeItem(accessTokenKey);\r\n    storage.removeItem(refreshTokenKey);\r\n    storage.removeItem(lastUserKey);\r\n  }\r\n\r\n  /**\r\n   * This is used to build a user session from tokens retrieved in the authentication result\r\n   * @param {object} authResult Successful auth response from server.\r\n   * @returns {CognitoUserSession} The new user session.\r\n   * @private\r\n   */\r\n  getCognitoUserSession(authResult) {\r\n    const idToken = new CognitoIdToken(authResult);\r\n    const accessToken = new CognitoAccessToken(authResult);\r\n    const refreshToken = new CognitoRefreshToken(authResult);\r\n\r\n    const sessionData = {\r\n      IdToken: idToken,\r\n      AccessToken: accessToken,\r\n      RefreshToken: refreshToken,\r\n    };\r\n\r\n    return new CognitoUserSession(sessionData);\r\n  }\r\n\r\n  /**\r\n   * This is used to initiate a forgot password request\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {inputVerificationCode?} callback.inputVerificationCode\r\n   *    Optional callback raised instead of onSuccess with response data.\r\n   * @param {onSuccess<void>?} callback.onSuccess Called on success.\r\n   * @returns {void}\r\n   */\r\n  forgotPassword(callback) {\r\n    this.client.makeUnauthenticatedRequest('forgotPassword', {\r\n      ClientId: this.pool.getClientId(),\r\n      Username: this.username,\r\n    }, (err, data) => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      if (typeof callback.inputVerificationCode === 'function') {\r\n        return callback.inputVerificationCode(data);\r\n      }\r\n      return callback.onSuccess();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used to confirm a new password using a confirmationCode\r\n   * @param {string} confirmationCode Code entered by user.\r\n   * @param {string} newPassword Confirm new password.\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {onSuccess<void>} callback.onSuccess Called on success.\r\n   * @returns {void}\r\n   */\r\n  confirmPassword(confirmationCode, newPassword, callback) {\r\n    this.client.makeUnauthenticatedRequest('confirmForgotPassword', {\r\n      ClientId: this.pool.getClientId(),\r\n      Username: this.username,\r\n      ConfirmationCode: confirmationCode,\r\n      Password: newPassword,\r\n    }, err => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      return callback.onSuccess();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * This is used to initiate an attribute confirmation request\r\n   * @param {string} attributeName User attribute that needs confirmation.\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {inputVerificationCode} callback.inputVerificationCode Called on success.\r\n   * @returns {void}\r\n   */\r\n  getAttributeVerificationCode(attributeName, callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('getUserAttributeVerificationCode', {\r\n      AttributeName: attributeName,\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, (err, data) => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      return callback.inputVerificationCode(data);\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used to confirm an attribute using a confirmation code\r\n   * @param {string} attributeName Attribute being confirmed.\r\n   * @param {string} confirmationCode Code entered by user.\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n   * @returns {void}\r\n   */\r\n  verifyAttribute(attributeName, confirmationCode, callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('verifyUserAttribute', {\r\n      AttributeName: attributeName,\r\n      Code: confirmationCode,\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, err => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      return callback.onSuccess('SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used to get the device information using the current device key\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device data.\r\n   * @returns {void}\r\n   */\r\n  getDevice(callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('getDevice', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n      DeviceKey: this.deviceKey,\r\n    }, (err, data) => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      return callback.onSuccess(data);\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used to forget the current device\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n   * @returns {void}\r\n   */\r\n  forgetDevice(callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('forgetDevice', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n      DeviceKey: this.deviceKey,\r\n    }, err => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      this.deviceKey = null;\r\n      this.deviceGroupkey = null;\r\n      this.randomPassword = null;\r\n      this.clearCachedDeviceKeyAndPassword();\r\n      return callback.onSuccess('SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used to set the device status as remembered\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n   * @returns {void}\r\n   */\r\n  setDeviceStatusRemembered(callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n      DeviceKey: this.deviceKey,\r\n      DeviceRememberedStatus: 'remembered',\r\n    }, err => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      return callback.onSuccess('SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used to set the device status as not remembered\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n   * @returns {void}\r\n   */\r\n  setDeviceStatusNotRemembered(callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('updateDeviceStatus', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n      DeviceKey: this.deviceKey,\r\n      DeviceRememberedStatus: 'not_remembered',\r\n    }, err => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      return callback.onSuccess('SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used to list all devices for a user\r\n   *\r\n   * @param {int} limit the number of devices returned in a call\r\n   * @param {string} paginationToken the pagination token in case any was returned before\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {onSuccess<*>} callback.onSuccess Called on success with device list.\r\n   * @returns {void}\r\n   */\r\n  listDevices(limit, paginationToken, callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('listDevices', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n      Limit: limit,\r\n      PaginationToken: paginationToken,\r\n    }, (err, data) => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      return callback.onSuccess(data);\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used to globally revoke all tokens issued to a user\r\n   * @param {object} callback Result callback map.\r\n   * @param {onFailure} callback.onFailure Called on any error.\r\n   * @param {onSuccess<string>} callback.onSuccess Called on success.\r\n   * @returns {void}\r\n   */\r\n  globalSignOut(callback) {\r\n    if (this.signInUserSession == null || !this.signInUserSession.isValid()) {\r\n      return callback(new Error('User is not authenticated'), null);\r\n    }\r\n\r\n    this.client.makeUnauthenticatedRequest('globalSignOut', {\r\n      AccessToken: this.signInUserSession.getAccessToken().getJwtToken(),\r\n    }, err => {\r\n      if (err) {\r\n        return callback.onFailure(err);\r\n      }\r\n      this.clearCachedTokens();\r\n      return callback.onSuccess('SUCCESS');\r\n    });\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * This is used for the user to signOut of the application and clear the cached tokens.\r\n   * @returns {void}\r\n   */\r\n  signOut() {\r\n    this.signInUserSession = null;\r\n    this.clearCachedTokens();\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/CognitoUser.js\n **/","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/** @class */\r\nexport default class CognitoUserAttribute {\r\n  /**\r\n   * Constructs a new CognitoUserAttribute object\r\n   * @param {string=} Name The record's name\r\n   * @param {string=} Value The record's value\r\n   */\r\n  constructor({ Name, Value } = {}) {\r\n    this.Name = Name || '';\r\n    this.Value = Value || '';\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the record's value.\r\n   */\r\n  getValue() {\r\n    return this.Value;\r\n  }\r\n\r\n  /**\r\n   * Sets the record's value.\r\n   * @param {string} value The new value.\r\n   * @returns {CognitoUserAttribute} The record for method chaining.\r\n   */\r\n  setValue(value) {\r\n    this.Value = value;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the record's name.\r\n   */\r\n  getName() {\r\n    return this.Name;\r\n  }\r\n\r\n  /**\r\n   * Sets the record's name\r\n   * @param {string} name The new name.\r\n   * @returns {CognitoUserAttribute} The record for method chaining.\r\n   */\r\n  setName(name) {\r\n    this.Name = name;\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} a string representation of the record.\r\n   */\r\n  toString() {\r\n    return JSON.stringify(this);\r\n  }\r\n\r\n  /**\r\n   * @returns {object} a flat object representing the record.\r\n   */\r\n  toJSON() {\r\n    return {\r\n      Name: this.Name,\r\n      Value: this.Value,\r\n    };\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/CognitoUserAttribute.js\n **/","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/** @class */\r\nexport default class CognitoUserSession {\r\n  /**\r\n   * Constructs a new CognitoUserSession object\r\n   * @param {string} IdToken The session's Id token.\r\n   * @param {string=} RefreshToken The session's refresh token.\r\n   * @param {string} AccessToken The session's access token.\r\n   */\r\n  constructor({ IdToken, RefreshToken, AccessToken } = {}) {\r\n    if (AccessToken == null || IdToken == null) {\r\n      throw new Error('Id token and Access Token must be present.');\r\n    }\r\n\r\n    this.idToken = IdToken;\r\n    this.refreshToken = RefreshToken;\r\n    this.accessToken = AccessToken;\r\n  }\r\n\r\n  /**\r\n   * @returns {CognitoIdToken} the session's Id token\r\n   */\r\n  getIdToken() {\r\n    return this.idToken;\r\n  }\r\n\r\n  /**\r\n   * @returns {CognitoRefreshToken} the session's refresh token\r\n   */\r\n  getRefreshToken() {\r\n    return this.refreshToken;\r\n  }\r\n\r\n  /**\r\n   * @returns {CognitoAccessToken} the session's access token\r\n   */\r\n  getAccessToken() {\r\n    return this.accessToken;\r\n  }\r\n\r\n  /**\r\n   * Checks to see if the session is still valid based on session expiry information found\r\n   * in tokens and the current time\r\n   * @returns {boolean} if the session is still valid\r\n   */\r\n  isValid() {\r\n    const now = Math.floor(new Date() / 1000);\r\n\r\n    return now < this.accessToken.getExpiration() && now < this.idToken.getExpiration();\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/CognitoUserSession.js\n **/","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nconst monthNames =\r\n  ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\r\nconst weekNames = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n\r\n/** @class */\r\nexport default class DateHelper {\r\n  /**\r\n   * @returns {string} The current time in \"ddd MMM D HH:mm:ss UTC YYYY\" format.\r\n   */\r\n  getNowString() {\r\n    const now = new Date();\r\n\r\n    const weekDay = weekNames[now.getUTCDay()];\r\n    const month = monthNames[now.getUTCMonth()];\r\n    const day = now.getUTCDate();\r\n\r\n    let hours = now.getUTCHours();\r\n    if (hours < 10) {\r\n      hours = `0${hours}`;\r\n    }\r\n\r\n    let minutes = now.getUTCMinutes();\r\n    if (minutes < 10) {\r\n      minutes = `0${minutes}`;\r\n    }\r\n\r\n    let seconds = now.getUTCSeconds();\r\n    if (seconds < 10) {\r\n      seconds = `0${seconds}`;\r\n    }\r\n\r\n    const year = now.getUTCFullYear();\r\n\r\n    // ddd MMM D HH:mm:ss UTC YYYY\r\n    const dateNow = `${weekDay} ${month} ${day} ${hours}:${minutes}:${seconds} UTC ${year}`;\r\n\r\n    return dateNow;\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/DateHelper.js\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_10__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":[\"AWSCognito\",\"CognitoIdentityServiceProvider\"],\"commonjs2\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"commonjs\":\"aws-sdk/clients/cognitoidentityserviceprovider\",\"amd\":\"aws-sdk/clients/cognitoidentityserviceprovider\"}\n ** module id = 10\n ** module chunks = 0\n **/","module.exports = __WEBPACK_EXTERNAL_MODULE_11__;\n\n\n/*****************\n ** WEBPACK FOOTER\n ** external {\"root\":[],\"commonjs2\":\"jsbn\",\"commonjs\":\"jsbn\",\"amd\":\"jsbn\"}\n ** module id = 11\n ** module chunks = 0\n **/","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/** @class */\r\nexport default class AuthenticationDetails {\r\n  /**\r\n   * Constructs a new AuthenticationDetails object\r\n   * @param {object=} data Creation options.\r\n   * @param {string} data.Username User being authenticated.\r\n   * @param {string} data.Password Plain-text password to authenticate with.\r\n   * @param {(AttributeArg[])?} data.ValidationData Application extra metadata.\r\n   */\r\n  constructor(data) {\r\n    const { ValidationData, Username, Password } = data || {};\r\n    this.validationData = ValidationData || [];\r\n    this.username = Username;\r\n    this.password = Password;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the record's username\r\n   */\r\n  getUsername() {\r\n    return this.username;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the record's password\r\n   */\r\n  getPassword() {\r\n    return this.password;\r\n  }\r\n\r\n  /**\r\n   * @returns {Array} the record's validationData\r\n   */\r\n  getValidationData() {\r\n    return this.validationData;\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/AuthenticationDetails.js\n **/","/*!\r\n * Copyright 2016 Amazon.com,\r\n * Inc. or its affiliates. All Rights Reserved.\r\n *\r\n * Licensed under the Amazon Software License (the \"License\").\r\n * You may not use this file except in compliance with the\r\n * License. A copy of the License is located at\r\n *\r\n *     http://aws.amazon.com/asl/\r\n *\r\n * or in the \"license\" file accompanying this file. This file is\r\n * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR\r\n * CONDITIONS OF ANY KIND, express or implied. See the License\r\n * for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\nimport CognitoIdentityServiceProvider from 'aws-sdk/clients/cognitoidentityserviceprovider';\r\n\r\nimport CognitoUser from './CognitoUser';\r\n\r\n/** @class */\r\nexport default class CognitoUserPool {\r\n  /**\r\n   * Constructs a new CognitoUserPool object\r\n   * @param {object} data Creation options.\r\n   * @param {string} data.UserPoolId Cognito user pool id.\r\n   * @param {string} data.ClientId User pool application client id.\r\n   * @param {int=} data.Paranoia Random number generation paranoia level.\r\n   */\r\n  constructor(data) {\r\n    const { UserPoolId, ClientId, Paranoia } = data || {};\r\n    if (!UserPoolId || !ClientId) {\r\n      throw new Error('Both UserPoolId and ClientId are required.');\r\n    }\r\n    if (!/^[\\w-]+_.+$/.test(UserPoolId)) {\r\n      throw new Error('Invalid UserPoolId format.');\r\n    }\r\n    const region = UserPoolId.split('_')[0];\r\n\r\n    this.userPoolId = UserPoolId;\r\n    this.clientId = ClientId;\r\n    this.paranoia = Paranoia || 0;\r\n\r\n    this.client = new CognitoIdentityServiceProvider({ apiVersion: '2016-04-19', region });\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the user pool id\r\n   */\r\n  getUserPoolId() {\r\n    return this.userPoolId;\r\n  }\r\n\r\n  /**\r\n   * @returns {string} the client id\r\n   */\r\n  getClientId() {\r\n    return this.clientId;\r\n  }\r\n\r\n  /**\r\n   * @returns {int} the paranoia level\r\n   */\r\n  getParanoia() {\r\n    return this.paranoia;\r\n  }\r\n\r\n  /**\r\n   * sets paranoia level\r\n   * @param {int} paranoia The new paranoia level.\r\n   * @returns {void}\r\n   */\r\n  setParanoia(paranoia) {\r\n    this.paranoia = paranoia;\r\n  }\r\n\r\n  /**\r\n   * @typedef {object} SignUpResult\r\n   * @property {CognitoUser} user New user.\r\n   * @property {bool} userConfirmed If the user is already confirmed.\r\n   */\r\n  /**\r\n   * method for signing up a user\r\n   * @param {string} username User's username.\r\n   * @param {string} password Plain-text initial password entered by user.\r\n   * @param {(AttributeArg[])=} userAttributes New user attributes.\r\n   * @param {(AttributeArg[])=} validationData Application metadata.\r\n   * @param {nodeCallback<SignUpResult>} callback Called on error or with the new user.\r\n   * @returns {void}\r\n   */\r\n  signUp(username, password, userAttributes, validationData, callback) {\r\n    this.client.makeUnauthenticatedRequest('signUp', {\r\n      ClientId: this.clientId,\r\n      Username: username,\r\n      Password: password,\r\n      UserAttributes: userAttributes,\r\n      ValidationData: validationData,\r\n    }, (err, data) => {\r\n      if (err) {\r\n        return callback(err, null);\r\n      }\r\n\r\n      const cognitoUser = {\r\n        Username: username,\r\n        Pool: this,\r\n      };\r\n\r\n      const returnData = {\r\n        user: new CognitoUser(cognitoUser),\r\n        userConfirmed: data.UserConfirmed,\r\n      };\r\n\r\n      return callback(null, returnData);\r\n    });\r\n  }\r\n\r\n\r\n  /**\r\n   * method for getting the current user of the application from the local storage\r\n   *\r\n   * @returns {CognitoUser} the user retrieved from storage\r\n   */\r\n  getCurrentUser() {\r\n    const lastUserKey = `CognitoIdentityServiceProvider.${this.clientId}.LastAuthUser`;\r\n    const storage = window.localStorage;\r\n\r\n    const lastAuthUser = storage.getItem(lastUserKey);\r\n    if (lastAuthUser) {\r\n      const cognitoUser = {\r\n        Username: lastAuthUser,\r\n        Pool: this,\r\n      };\r\n\r\n      return new CognitoUser(cognitoUser);\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\n\n\n/** WEBPACK FOOTER **\n ** ./src/CognitoUserPool.js\n **/"],"sourceRoot":""}